"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var win$1=window,raf=win$1.requestAnimationFrame||win$1.webkitRequestAnimationFrame||win$1.mozRequestAnimationFrame||win$1.msRequestAnimationFrame||function(e){return setTimeout(e,16)},win=window,caf=win.cancelAnimationFrame||win.mozCancelAnimationFrame||function(e){clearTimeout(e)};function extend(){for(var e,t,n,a=arguments[0]||{},o=1,r=arguments.length;o<r;o++)if(null!==(e=arguments[o]))for(t in e)a!==(n=e[t])&&void 0!==n&&(a[t]=n);return a}function checkStorageValue(e){return 0<=["true","false"].indexOf(e)?JSON.parse(e):e}function setLocalStorage(e,t,n,a){if(a)try{e.setItem(t,n)}catch(e){}return n}function getSlideId(){var e=window.tnsId;return window.tnsId=e?e+1:1,"tns"+window.tnsId}function getBody(){var e=document,t=e.body;return t||((t=e.createElement("body")).fake=!0),t}var docElement=document.documentElement;function setFakeBody(e){var t="";return e.fake&&(t=docElement.style.overflow,e.style.background="",e.style.overflow=docElement.style.overflow="hidden",docElement.appendChild(e)),t}function resetFakeBody(e,t){e.fake&&(e.remove(),docElement.style.overflow=t,docElement.offsetHeight)}function calc(){var e=document,t=getBody(),n=setFakeBody(t),a=e.createElement("div"),o=!1;t.appendChild(a);try{for(var r,i="(10px * 10)",s=["calc"+i,"-moz-calc"+i,"-webkit-calc"+i],l=0;l<3;l++)if(r=s[l],a.style.width=r,100===a.offsetWidth){o=r.replace(i,"");break}}catch(e){}return t.fake?resetFakeBody(t,n):a.remove(),o}function percentageLayout(){var e=document,t=getBody(),n=setFakeBody(t),a=e.createElement("div"),e=e.createElement("div"),o="";a.className="tns-t-subp2",e.className="tns-t-ct";for(var r=0;r<70;r++)o+="<div></div>";return e.innerHTML=o,a.appendChild(e),t.appendChild(a),e=Math.abs(a.getBoundingClientRect().left-e.children[67].getBoundingClientRect().left)<2,t.fake?resetFakeBody(t,n):a.remove(),e}function mediaquerySupport(){var e,t,n,a,o,r;return!(!window.matchMedia&&!window.msMatchMedia)||(e=document,n=setFakeBody(t=getBody()),a=e.createElement("div"),o="@media all and (min-width:1px){.tns-mq-test{position:absolute}}",(r=e.createElement("style")).type="text/css",a.className="tns-mq-test",t.appendChild(r),t.appendChild(a),r.styleSheet?r.styleSheet.cssText=o:r.appendChild(e.createTextNode(o)),r=(window.getComputedStyle?window.getComputedStyle(a):a.currentStyle).position,t.fake?resetFakeBody(t,n):a.remove(),"absolute"===r)}function createStyleSheet(e,t){var n=document.createElement("style");return e&&n.setAttribute("media",e),t&&n.setAttribute("nonce",t),document.querySelector("head").appendChild(n),n.sheet||n.styleSheet}function addCSSRule(e,t,n,a){"insertRule"in e?e.insertRule(t+"{"+n+"}",a):e.addRule(t,n,a)}function removeCSSRule(e,t){"deleteRule"in e?e.deleteRule(t):e.removeRule(t)}function getCssRulesLength(e){return("insertRule"in e?e.cssRules:e.rules).length}function toDegree(e,t){return Math.atan2(e,t)*(180/Math.PI)}function getTouchDirection(e,t){var n=!1,e=Math.abs(90-Math.abs(e));return 90-t<=e?n="horizontal":e<=t&&(n="vertical"),n}function forEach(e,t,n){for(var a=0,o=e.length;a<o;a++)t.call(n,e[a],a)}var classListSupport="classList"in document.createElement("_"),hasClass=classListSupport?function(e,t){return e.classList.contains(t)}:function(e,t){return 0<=e.className.indexOf(t)},addClass=classListSupport?function(e,t){hasClass(e,t)||e.classList.add(t)}:function(e,t){hasClass(e,t)||(e.className+=" "+t)},removeClass=classListSupport?function(e,t){hasClass(e,t)&&e.classList.remove(t)}:function(e,t){hasClass(e,t)&&(e.className=e.className.replace(t,""))};function hasAttr(e,t){return e.hasAttribute(t)}function getAttr(e,t){return e.getAttribute(t)}function isNodeList(e){return void 0!==e.item}function setAttrs(e,t){if(e=isNodeList(e)||e instanceof Array?e:[e],"[object Object]"===Object.prototype.toString.call(t))for(var n=e.length;n--;)for(var a in t)e[n].setAttribute(a,t[a])}function removeAttrs(e,t){e=isNodeList(e)||e instanceof Array?e:[e];for(var n=(t=t instanceof Array?t:[t]).length,a=e.length;a--;)for(var o=n;o--;)e[a].removeAttribute(t[o])}function arrayFromNodeList(e){for(var t=[],n=0,a=e.length;n<a;n++)t.push(e[n]);return t}function hideElement(e,t){"none"!==e.style.display&&(e.style.display="none")}function showElement(e,t){"none"===e.style.display&&(e.style.display="")}function isVisible(e){return"none"!==window.getComputedStyle(e).display}function whichProperty(t){"string"==typeof t&&(n=[t],a=t.charAt(0).toUpperCase()+t.substr(1),["Webkit","Moz","ms","O"].forEach(function(e){"ms"===e&&"transform"!==t||n.push(e+a)}),t=n);var n,a,e=document.createElement("fakeelement");t.length;for(var o=0;o<t.length;o++){var r=t[o];if(void 0!==e.style[r])return r}return!1}function has3DTransforms(e){var t,n,a,o;return!!e&&!!window.getComputedStyle&&(a=document,n=setFakeBody(t=getBody()),a=a.createElement("p"),o=9<e.length?"-"+e.slice(0,-9).toLowerCase()+"-":"",o+="transform",t.insertBefore(a,null),a.style[e]="translate3d(1px,1px,1px)",e=window.getComputedStyle(a).getPropertyValue(o),t.fake?resetFakeBody(t,n):a.remove(),void 0!==e)&&0<e.length&&"none"!==e}function getEndProperty(e,t){var n=!1;return/^Webkit/.test(e)?n="webkit"+t+"End":/^O/.test(e)?n="o"+t+"End":e&&(n=t.toLowerCase()+"end"),n}var supportsPassive=!1;try{var opts=Object.defineProperty({},"passive",{get:function(){supportsPassive=!0}});window.addEventListener("test",null,opts)}catch(e){}var passiveOption=!!supportsPassive&&{passive:!0};function addEvents(e,t,n){for(var a in t){var o=0<=["touchstart","touchmove"].indexOf(a)&&!n&&passiveOption;e.addEventListener(a,t[a],o)}}function removeEvents(e,t){for(var n in t){var a=0<=["touchstart","touchmove"].indexOf(n)&&passiveOption;e.removeEventListener(n,t[n],a)}}function Events(){return{topics:{},on:function(e,t){this.topics[e]=this.topics[e]||[],this.topics[e].push(t)},off:function(e,t){if(this.topics[e])for(var n=0;n<this.topics[e].length;n++)if(this.topics[e][n]===t){this.topics[e].splice(n,1);break}},emit:function(t,n){n.type=t,this.topics[t]&&this.topics[t].forEach(function(e){e(n,t)})}}}function jsTransform(t,n,a,o,e,r,i){var s=Math.min(r,10),l=0<=e.indexOf("%")?"%":"px",e=e.replace(l,""),u=Number(t.style[n].replace(a,"").replace(o,"").replace(l,"")),c=(e-u)/r*s;setTimeout(function e(){r-=s;u+=c;t.style[n]=a+u+l+o;0<r?setTimeout(e,s):i()},s)}Object.keys||(Object.keys=function(e){var t,n=[];for(t in e)Object.prototype.hasOwnProperty.call(e,t)&&n.push(t);return n}),"remove"in Element.prototype||(Element.prototype.remove=function(){this.parentNode&&this.parentNode.removeChild(this)});var tns=function(P){P=extend({container:".slider",mode:"carousel",axis:"horizontal",items:1,gutter:0,edgePadding:0,fixedWidth:!1,autoWidth:!1,viewportMax:!1,slideBy:1,center:!1,controls:!0,controlsPosition:"top",controlsText:["prev","next"],controlsContainer:!1,prevButton:!1,nextButton:!1,nav:!0,navPosition:"top",navContainer:!1,navAsThumbnails:!1,arrowKeys:!1,speed:300,autoplay:!1,autoplayPosition:"top",autoplayTimeout:5e3,autoplayDirection:"forward",autoplayText:["start","stop"],autoplayHoverPause:!1,autoplayButton:!1,autoplayButtonOutput:!0,autoplayResetOnVisibility:!0,animateIn:"tns-fadeIn",animateOut:"tns-fadeOut",animateNormal:"tns-normal",animateDelay:!1,loop:!0,rewind:!1,autoHeight:!1,responsive:!1,lazyload:!1,lazyloadSelector:".tns-lazy-img",touch:!0,mouseDrag:!1,swipeAngle:15,nested:!1,preventActionWhenRunning:!1,preventScrollOnTouch:!1,freezable:!0,onInit:!1,useLocalStorage:!0,nonce:!1},P||{});var D=document,a=window,o={ENTER:13,SPACE:32,LEFT:37,RIGHT:39},t={},n=P.useLocalStorage;if(n){var r=navigator.userAgent,u=new Date;try{(t=a.localStorage)?(t.setItem(u,u),n=t.getItem(u)==u,t.removeItem(u)):n=!1,n||(t={})}catch(e){n=!1}n&&(t.tnsApp&&t.tnsApp!==r&&["tC","tPL","tMQ","tTf","t3D","tTDu","tTDe","tADu","tADe","tTE","tAE"].forEach(function(e){t.removeItem(e)}),localStorage.tnsApp=r)}var c=t.tC?checkStorageValue(t.tC):setLocalStorage(t,"tC",calc(),n),u=t.tPL?checkStorageValue(t.tPL):setLocalStorage(t,"tPL",percentageLayout(),n),ue=t.tMQ?checkStorageValue(t.tMQ):setLocalStorage(t,"tMQ",mediaquerySupport(),n),d=t.tTf?checkStorageValue(t.tTf):setLocalStorage(t,"tTf",whichProperty("transform"),n),r=t.t3D?checkStorageValue(t.t3D):setLocalStorage(t,"t3D",has3DTransforms(d),n),s=t.tTDu?checkStorageValue(t.tTDu):setLocalStorage(t,"tTDu",whichProperty("transitionDuration"),n),f=t.tTDe?checkStorageValue(t.tTDe):setLocalStorage(t,"tTDe",whichProperty("transitionDelay"),n),v=t.tADu?checkStorageValue(t.tADu):setLocalStorage(t,"tADu",whichProperty("animationDuration"),n),h=t.tADe?checkStorageValue(t.tADe):setLocalStorage(t,"tADe",whichProperty("animationDelay"),n),m=t.tTE?checkStorageValue(t.tTE):setLocalStorage(t,"tTE",getEndProperty(s,"Transition"),n),p=t.tAE?checkStorageValue(t.tAE):setLocalStorage(t,"tAE",getEndProperty(v,"Animation"),n),g=a.console&&"function"==typeof a.console.warn,y=["container","controlsContainer","prevButton","nextButton","navContainer","autoplayButton"],C={};if(y.forEach(function(e){var t,n;"string"==typeof P[e]&&(t=P[e],n=D.querySelector(t),C[e]=t,n&&n.nodeName?P[e]=n:g&&console.warn("Can't find",P[e]))}),!(P.container.children.length<1)){var ce,de,E,fe,O=P.responsive,ve=P.nested,H="carousel"===P.mode;if(O){0 in O&&(P=extend(P,O[0]),delete O[0]);var x,b={};for(x in O){var w=O[x];b[x]="number"==typeof w?{items:w}:w}O=b,b=null}H||!function e(t){for(var n in t)H||("slideBy"===n&&(t[n]="page"),"edgePadding"===n&&(t[n]=!1),"autoHeight"===n&&(t[n]=!1)),"responsive"===n&&e(t[n])}(P),H||(P.axis="horizontal",P.slideBy="page",P.edgePadding=!1,ce=P.animateIn,de=P.animateOut,E=P.animateDelay,fe=P.animateNormal);var S,he,i,A,M,L,I,T,F,z,B,k,R,N,W,me,pe,ge,ye,Ce,Ee,xe,be,we,Se,Ae,V,Me,Le,Te,Be,ke,Re,Ne,Pe,De,Oe,He,Ie,Fe,q="horizontal"===P.axis,l=D.createElement("div"),ze=D.createElement("div"),j=P.container,We=j.parentNode,Ve=j.outerHTML,$=j.children,G=$.length,qe=En(),je=!1,Q=(O&&zn(),H&&(j.className+=" tns-vpfix"),P.autoWidth),X=se("fixedWidth"),Y=se("edgePadding"),K=se("gutter"),_=bn(),J=se("center"),U=Q?1:Math.floor(se("items")),$e=se("slideBy"),Ge=P.viewportMax||P.fixedWidthViewportWidth,Qe=se("arrowKeys"),Xe=se("speed"),Ye=P.rewind,Z=!Ye&&P.loop,Ke=se("autoHeight"),_e=se("controls"),Je=se("controlsText"),Ue=se("nav"),Ze=se("touch"),et=se("mouseDrag"),ee=se("autoplay"),tt=se("autoplayTimeout"),nt=se("autoplayText"),at=se("autoplayHoverPause"),ot=se("autoplayResetOnVisibility"),te=createStyleSheet(null,se("nonce")),rt=P.lazyload,it=P.lazyloadSelector,st=[],ne=Z?(n=function(){{if(Q||X&&!Ge)return G-1;var e=X?"fixedWidth":"items",t=[];if((X||P[e]<G)&&t.push(P[e]),O)for(var n in O){n=O[n][e];n&&(X||n<G)&&t.push(n)}return t.length||t.push(0),Math.ceil(X?Ge/Math.min.apply(null,t):Math.max.apply(null,t))}}(),A=H?Math.ceil((5*n-G)/2):4*n-G,A=Math.max(n,A),wn("edgePadding")?A+1:A):0,ae=H?G+2*ne:G+ne,lt=!(!X&&!Q||Z),ut=X?da():null,ct=!H||!Z,dt=q?"left":"top",ft="",vt="",ht=X?function(){return J&&!Z?G-1:Math.ceil(-ut/(X+K))}:Q?function(){for(var e=0;e<ae;e++)if(i[e]>=-ut)return e}:function(){return J&&H&&!Z?G-1:Z||H?Math.max(0,ae-Math.ceil(U)):ae-1},oe=gn(se("startIndex")),mt=oe,pt=(pn(),0),gt=Q?null:ht(),yt=P.preventActionWhenRunning,Ct=P.swipeAngle,Et=!Ct||"?",xt=!1,bt=P.onInit,re=new Events,wt=" tns-slider tns-"+P.mode,ie=j.id||getSlideId(),St=se("disable"),At=!1,Mt=P.freezable,Lt=!(!Mt||Q)&&Fn(),Tt=!1,Bt={click:Ea,keydown:function(e){e=Ta(e);var t=[o.LEFT,o.RIGHT].indexOf(e.keyCode);0<=t&&(0===t?F.disabled||Ea(e,-1):z.disabled||Ea(e,1))}},kt={click:function(e){if(xt){if(yt)return;ya()}var t=Ba(e=Ta(e));for(;t!==W&&!hasAttr(t,"data-nav");)t=t.parentNode;{var n,a;hasAttr(t,"data-nav")&&(n=Ce=Number(getAttr(t,"data-nav")),a=X||Q?n*G/ge:n*U,Ca(Ft?n:Math.min(Math.ceil(a),G-1),e),Ee===n)&&(Be&&Aa(),Ce=-1)}},keydown:function(e){e=Ta(e);var t,n=D.activeElement;hasAttr(n,"data-nav")&&(t=[o.LEFT,o.RIGHT,o.ENTER,o.SPACE].indexOf(e.keyCode),n=Number(getAttr(n,"data-nav")),0<=t)&&(0===t?0<n&&La(pe[n-1]):1===t?n<ge-1&&La(pe[n+1]):Ca(Ce=n,e))}},Rt={mouseover:function(){Be&&(ba(),ke=!0)},mouseout:function(){ke&&(xa(),ke=!1)}},Nt={visibilitychange:function(){D.hidden?Be&&(ba(),Ne=!0):Ne&&(xa(),Ne=!1)}},Pt={keydown:function(e){e=Ta(e);var t=[o.LEFT,o.RIGHT].indexOf(e.keyCode);0<=t&&Ea(e,0===t?-1:1)}},Dt={touchstart:Pa,touchmove:Da,touchend:Oa,touchcancel:Oa},Ot={mousedown:Pa,mousemove:Da,mouseup:Oa,mouseleave:Oa},Ht=wn("controls"),It=wn("nav"),Ft=!!Q||P.navAsThumbnails,zt=wn("autoplay"),n=wn("touch"),Wt=wn("mouseDrag"),Vt="tns-slide-active",qt="tns-slide-cloned",jt="tns-complete",$t={load:function(e){Yn(Ba(e))},error:function(e){!function(e){addClass(e,"failed"),Kn(e)}(Ba(e))}},Gt="force"===P.preventScrollOnTouch;if(Ht&&(I=P.controlsContainer,T=P.controlsContainer?P.controlsContainer.outerHTML:"",F=P.prevButton,z=P.nextButton,B=P.prevButton?P.prevButton.outerHTML:"",k=P.nextButton?P.nextButton.outerHTML:""),It&&(W=P.navContainer,me=P.navContainer?P.navContainer.outerHTML:"",ge=Q?G:Ia(),ye=0,Ce=-1,Ee=Cn(),xe=Ee,be="tns-nav-active",we="Carousel Page ",Se=" (Current Slide)"),zt&&(Ae="forward"===P.autoplayDirection?1:-1,V=P.autoplayButton,Me=P.autoplayButton?P.autoplayButton.outerHTML:"",Le=["<span class='tns-visually-hidden'>"," animation</span>"]),(n||Wt)&&(Pe={},He=!(De={}),Fe=q?function(e,t){return e.x-t.x}:function(e,t){return e.y-t.y}),Q||mn(St||Lt),d&&(dt=d,ft="translate",vt=r?(ft+=q?"3d(":"3d(0px, ",q?", 0px, 0px)":", 0px)"):(ft+=q?"X(":"Y(",")")),H&&(j.className=j.className.replace("tns-vpfix","")),wn("gutter"),l.className="tns-outer",ze.className="tns-inner",l.id=ie+"-ow",ze.id=ie+"-iw",""===j.id&&(j.id=ie),wt=wt+(u||Q?" tns-subpixel":" tns-no-subpixel")+(c?" tns-calc":" tns-no-calc"),Q&&(wt+=" tns-autowidth"),wt+=" tns-"+P.axis,j.className+=wt,(H?((S=D.createElement("div")).id=ie+"-mw",S.className="tns-ovh",l.appendChild(S),S):l).appendChild(ze),Ke&&((S||ze).className+=" tns-ah"),We.insertBefore(l,j),ze.appendChild(j),forEach($,function(e,t){addClass(e,"tns-item"),e.id||(e.id=ie+"-item"+t),!H&&fe&&addClass(e,fe),setAttrs(e,{"aria-hidden":"true",tabindex:"-1"})}),ne){for(var Qt=D.createDocumentFragment(),Xt=D.createDocumentFragment(),Yt=ne;Yt--;){var Kt=Yt%G,_t=$[Kt].cloneNode(!0);addClass(_t,qt),removeAttrs(_t,"id"),Xt.insertBefore(_t,Xt.firstChild),H&&(_t=$[G-1-Kt].cloneNode(!0),addClass(_t,qt),removeAttrs(_t,"id"),Qt.appendChild(_t))}j.insertBefore(Qt,j.firstChild),j.appendChild(Xt),$=j.children}if(!H)for(var Jt=oe,Ut=oe+Math.min(G,U);Jt<Ut;Jt++){var Zt=$[Jt];Zt.style.left=100*(Jt-oe)/U+"%",addClass(Zt,ce),removeClass(Zt,fe)}if(q&&(u||Q?(addCSSRule(te,"#"+ie+" > .tns-item","font-size:"+a.getComputedStyle($[0]).fontSize+";",getCssRulesLength(te)),addCSSRule(te,"#"+ie,"font-size:0;",getCssRulesLength(te))):H&&forEach($,function(e,t){e.style.marginLeft=(e=t,c?c+"("+100*e+"% / "+ae+")":100*e/ae+"%")})),ue?(s&&(e=S&&P.autoHeight?Bn(P.speed):"",addCSSRule(te,"#"+ie+"-mw",e,getCssRulesLength(te))),e=Sn(P.edgePadding,P.gutter,P.fixedWidth,P.speed,P.autoHeight),addCSSRule(te,"#"+ie+"-iw",e,getCssRulesLength(te)),H&&(e=q&&!Q?"width:"+An(P.fixedWidth,P.gutter,P.items)+";":"",s&&(e+=Bn(Xe)),addCSSRule(te,"#"+ie,e,getCssRulesLength(te))),e=q&&!Q?Mn(P.fixedWidth,P.gutter,P.items):"",P.gutter&&(e+=Ln(P.gutter)),H||(s&&(e+=Bn(Xe)),v&&(e+=kn(Xe)))):(H&&Ke&&(S.style[s]=Xe/1e3+"s"),ze.style.cssText=Sn(Y,K,X,Ke),H&&q&&!Q&&(j.style.width=An(X,K,U)),e=q&&!Q?Mn(X,K,U):"",K&&(e+=Ln(K))),e&&addCSSRule(te,"#"+ie+" > .tns-item",e,getCssRulesLength(te)),O&&ue)for(var en in O){en=parseInt(en);var tn=O[en],e="",nn="",an="",on="",rn="",sn=Q?null:se("items",en),ln=se("fixedWidth",en),un=se("speed",en),cn=se("edgePadding",en),dn=se("autoHeight",en),fn=se("gutter",en);s&&S&&se("autoHeight",en)&&"speed"in tn&&(nn="#"+ie+"-mw{"+Bn(un)+"}"),("edgePadding"in tn||"gutter"in tn)&&(an="#"+ie+"-iw{"+Sn(cn,fn,ln,un,dn)+"}"),H&&q&&!Q&&("fixedWidth"in tn||"items"in tn||X&&"gutter"in tn)&&(on="width:"+An(ln,fn,sn)+";"),s&&"speed"in tn&&(on+=Bn(un)),on=on&&"#"+ie+"{"+on+"}",("fixedWidth"in tn||X&&"gutter"in tn||!H&&"items"in tn)&&(rn+=Mn(ln,fn,sn)),"gutter"in tn&&(rn+=Ln(fn)),!H&&"speed"in tn&&(s&&(rn+=Bn(un)),v)&&(rn+=kn(un)),(e=nn+an+on+(rn=rn&&"#"+ie+" > .tns-item{"+rn+"}"))&&te.insertRule("@media (min-width: "+en/16+"em) {"+e+"}",te.cssRules.length)}Rn();var vn=Z?H?function(){var e=pt,t=gt;e+=$e,t-=$e,Y?(e+=1,--t):X&&(_+K)%(X+K)&&--t,ne&&(t<oe?oe-=G:oe<e&&(oe+=G))}:function(){if(gt<oe)for(;pt+G<=oe;)oe-=G;else if(oe<pt)for(;oe<=gt-G;)oe+=G}:function(){oe=Math.max(pt,Math.min(gt,oe))},hn=H?function(){ua(j,""),s||!Xe?(ha(),Xe&&isVisible(j)||ya()):jsTransform(j,dt,ft,vt,fa(),Xe,ya),q||Ha()}:function(){st=[];var e={};e[m]=e[p]=ya,removeEvents($[mt],e),addEvents($[oe],e),ma(mt,ce,de,!0),ma(oe,fe,ce),m&&p&&Xe&&isVisible(j)||ya()};return{version:"2.9.4",getInfo:le,events:re,goTo:Ca,play:function(){ee&&!Be&&(Sa(),Re=!1)},pause:function(){Be&&(Aa(),Re=!0)},isOn:je,updateSliderHeight:ta,refresh:Rn,destroy:function(){te.disabled=!0,te.ownerNode&&te.ownerNode.remove(),removeEvents(a,{resize:Hn}),Qe&&removeEvents(D,Pt),I&&removeEvents(I,Bt),W&&removeEvents(W,kt),removeEvents(j,Rt),removeEvents(j,Nt),V&&removeEvents(V,{click:Ma}),ee&&clearInterval(Te),H&&m&&((e={})[m]=ya,removeEvents(j,e)),Ze&&removeEvents(j,Dt),et&&removeEvents(j,Ot);var e,t,r=[Ve,T,B,k,me,Me];for(t in y.forEach(function(e,t){var n,a,o="container"===e?l:P[e];"object"==typeof o&&o&&(n=o.previousElementSibling||!1,a=o.parentNode,o.outerHTML=r[t],P[e]=n?n.nextElementSibling:a.firstElementChild)}),y=ce=de=E=fe=q=l=ze=j=We=Ve=$=G=he=qe=Q=X=Y=K=_=U=$e=Ge=Qe=Xe=Ye=Z=Ke=te=rt=i=st=ne=ae=lt=ut=ct=dt=ft=vt=ht=oe=mt=pt=gt=Ct=Et=xt=bt=re=wt=ie=St=At=Mt=Lt=Tt=Bt=kt=Rt=Nt=Pt=Dt=Ot=Ht=It=Ft=zt=Wt=Vt=jt=$t=M=_e=Je=I=T=F=z=R=N=Ue=W=me=pe=ge=ye=Ce=Ee=xe=be=we=Se=ee=tt=Ae=nt=at=V=Me=ot=Le=Te=Be=ke=Re=Ne=Pe=De=Oe=He=Ie=Fe=Ze=et=null,this)"rebuild"!==t&&(this[t]=null);je=!1},rebuild:function(){return tns(extend(P,C))}}}function mn(e){e&&(_e=Ue=Ze=et=Qe=ee=at=ot=!1)}function pn(){for(var e=H?oe-ne:oe;e<0;)e+=G;return e%G+1}function gn(e){return e=e?Math.max(0,Math.min(Z?G-1:G-U,e)):0,H?e+ne:e}function yn(e){for(null==e&&(e=oe),H&&(e-=ne);e<0;)e+=G;return Math.floor(e%G)}function Cn(){var e=yn(),e=Ft?e:X||Q?Math.ceil((e+1)*ge/G-1):Math.floor(e/U);return e=!Z&&H&&oe===gt?ge-1:e}function En(){return a.innerWidth||D.documentElement.clientWidth||D.body.clientWidth}function xn(e){return"top"===e?"afterbegin":"beforeend"}function bn(){var e=Y?2*Y-K:0;return function e(t){var n,a;if(null!=t)return n=D.createElement("div"),t.appendChild(n),a=(a=n.getBoundingClientRect()).right-a.left,n.remove(),a||e(t.parentNode)}(We)-e}function wn(e){if(P[e])return!0;if(O)for(var t in O)if(O[t][e])return!0;return!1}function se(e,t){if(null==t&&(t=qe),"items"===e&&X)return Math.floor((_+K)/(X+K))||1;var n=P[e];if(O)for(var a in O)t>=parseInt(a)&&e in O[a]&&(n=O[a][e]);return"slideBy"===e&&"page"===n&&(n=se("items")),n=H||"slideBy"!==e&&"items"!==e?n:Math.floor(n)}function Sn(e,t,n,a,o){var r,i="";return void 0!==e?(r=e,t&&(r-=t),i=q?"margin: 0 "+r+"px 0 "+e+"px;":"margin: "+e+"px 0 "+r+"px 0;"):t&&!n&&(e="-"+t+"px",i="margin: 0 "+(q?e+" 0 0":"0 "+e+" 0")+";"),!H&&o&&s&&a&&(i+=Bn(a)),i}function An(e,t,n){return e?(e+t)*ae+"px":c?c+"("+100*ae+"% / "+n+")":100*ae/n+"%"}function Mn(e,t,n){return t="width:"+(t=e?e+t+"px":(H||(n=Math.floor(n)),e=H?ae:n,c?c+"(100% / "+e+")":100/e+"%")),"inner"!==ve?t+";":t+" !important;"}function Ln(e){return!1!==e?(q?"padding-":"margin-")+(q?"right":"bottom")+": "+e+"px;":""}function Tn(e,t){e=e.substring(0,e.length-t).toLowerCase();return e=e&&"-"+e+"-"}function Bn(e){return Tn(s,18)+"transition-duration:"+e/1e3+"s;"}function kn(e){return Tn(v,17)+"animation-duration:"+e/1e3+"s;"}function Rn(){var e;wn("autoHeight")||Q||!q?(forEach(e=j.querySelectorAll("img"),function(e){var t=e.src;rt||(t&&t.indexOf("data:image")<0?(e.src="",addEvents(e,$t),addClass(e,"loading"),e.src=t):Yn(e))}),raf(function(){Un(arrayFromNodeList(e),function(){M=!0})}),wn("autoHeight")&&(e=_n(oe,Math.min(oe+U-1,ae-1))),rt?Nn():raf(function(){Un(arrayFromNodeList(e),Nn)})):(H&&va(),Dn(),On())}function Nn(){var a;(Q&&1<G?(a=Z?oe:G-1,function e(){var t=$[a].getBoundingClientRect().left,n=$[a-1].getBoundingClientRect().right;Math.abs(t-n)<=1?Pn():setTimeout(function(){e()},16)}):Pn)()}function Pn(){q&&!Q||(na(),Q?(ut=da(),Mt&&(Lt=Fn()),gt=ht(),mn(St||Lt)):Ha()),H&&va(),Dn(),On()}function Dn(){var e,t;if(aa(),l.insertAdjacentHTML("afterbegin",'<div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">slide <span class="current">'+Gn()+"</span>  of "+G+"</div>"),L=l.querySelector(".tns-liveregion .current"),zt&&(e=ee?"stop":"start",V?setAttrs(V,{"data-action":e}):P.autoplayButtonOutput&&(l.insertAdjacentHTML(xn(P.autoplayPosition),'<button type="button" data-action="'+e+'">'+Le[0]+e+Le[1]+nt[0]+"</button>"),V=l.querySelector("[data-action]")),V&&addEvents(V,{click:Ma}),ee)&&(Sa(),at&&addEvents(j,Rt),ot)&&addEvents(j,Nt),It){if(W)setAttrs(W,{"aria-label":"Carousel Pagination"}),forEach(pe=W.children,function(e,t){setAttrs(e,{"data-nav":t,tabindex:"-1","aria-label":we+(t+1),"aria-controls":ie})});else{for(var n="",a=Ft?"":'style="display:none"',o=0;o<G;o++)n+='<button type="button" data-nav="'+o+'" tabindex="-1" aria-controls="'+ie+'" '+a+' aria-label="'+we+(o+1)+'"></button>';l.insertAdjacentHTML(xn(P.navPosition),n='<div class="tns-nav" aria-label="Carousel Pagination">'+n+"</div>"),W=l.querySelector(".tns-nav"),pe=W.children}Fa(),s&&(e=s.substring(0,s.length-18).toLowerCase(),t="transition: all "+Xe/1e3+"s",addCSSRule(te,"[aria-controls^="+ie+"-item]",t=e?"-"+e+"-"+t:t,getCssRulesLength(te))),setAttrs(pe[Ee],{"aria-label":we+(Ee+1)+Se}),removeAttrs(pe[Ee],"tabindex"),addClass(pe[Ee],be),addEvents(W,kt)}Ht&&(I||F&&z||(l.insertAdjacentHTML(xn(P.controlsPosition),'<div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button type="button" data-controls="prev" tabindex="-1" aria-controls="'+ie+'">'+Je[0]+'</button><button type="button" data-controls="next" tabindex="-1" aria-controls="'+ie+'">'+Je[1]+"</button></div>"),I=l.querySelector(".tns-controls")),F&&z||(F=I.children[0],z=I.children[1]),P.controlsContainer&&setAttrs(I,{"aria-label":"Carousel Navigation",tabindex:"0"}),(P.controlsContainer||P.prevButton&&P.nextButton)&&setAttrs([F,z],{"aria-controls":ie,tabindex:"-1"}),(P.controlsContainer||P.prevButton&&P.nextButton)&&(setAttrs(F,{"data-controls":"prev"}),setAttrs(z,{"data-controls":"next"})),R=ra(F),N=ra(z),la(),I?addEvents(I,Bt):(addEvents(F,Bt),addEvents(z,Bt))),Wn()}function On(){var e;H&&m&&((e={})[m]=ya,addEvents(j,e)),Ze&&addEvents(j,Dt,P.preventScrollOnTouch),et&&addEvents(j,Ot),Qe&&addEvents(D,Pt),"inner"===ve?re.on("outerResized",function(){In(),re.emit("innerLoaded",le())}):(O||X||Q||Ke||!q)&&addEvents(a,{resize:Hn}),Ke&&("outer"===ve?re.on("innerLoaded",Jn):St||Jn()),Xn(),St?jn():Lt&&qn(),re.on("indexChanged",Zn),"inner"===ve&&re.emit("innerLoaded",le()),"function"==typeof bt&&bt(le()),je=!0}function Hn(e){raf(function(){In(Ta(e))})}function In(e){if(je){"outer"===ve&&re.emit("outerResized",le(e)),qe=En();var t,n=he,a=!1;O&&(zn(),t=n!==he)&&re.emit("newBreakpointStart",le(e));var o,r,i,s,l,u,c,d,n=U,f=St,v=Lt,h=Qe,m=_e,p=Ue,g=Ze,y=et,C=ee,E=at,x=ot,b=oe;if(t&&(r=X,i=Ke,s=Je,l=J,u=nt,ue||(c=K,d=Y)),Qe=se("arrowKeys"),_e=se("controls"),Ue=se("nav"),Ze=se("touch"),J=se("center"),et=se("mouseDrag"),ee=se("autoplay"),at=se("autoplayHoverPause"),ot=se("autoplayResetOnVisibility"),t&&(St=se("disable"),X=se("fixedWidth"),Xe=se("speed"),Ke=se("autoHeight"),Je=se("controlsText"),nt=se("autoplayText"),tt=se("autoplayTimeout"),ue||(Y=se("edgePadding"),K=se("gutter"))),mn(St),_=bn(),q&&!Q||St||(na(),q)||(Ha(),a=!0),(X||Q)&&(ut=da(),gt=ht()),(t||X)&&(U=se("items"),$e=se("slideBy"),o=U!==n)&&(X||Q||(gt=ht()),vn()),t&&St!==f)if(St)jn();else if(At){if(te.disabled=!1,j.className+=wt,va(),Z)for(var w=ne;w--;)H&&showElement($[w]),showElement($[ae-w-1]);if(!H)for(var S=oe,A=oe+G;S<A;S++){var M=$[S],L=S<oe+U?ce:fe;M.style.left=100*(S-oe)/U+"%",addClass(M,L)}Vn(),At=!1}if(Mt&&(t||X||Q)&&(Lt=Fn())!==v)if(Lt)ha(fa(gn(0))),qn();else{if(Tt){if(Y&&ue&&(ze.style.margin=""),ne)for(var T="tns-transparent",B=ne;B--;)H&&removeClass($[B],T),removeClass($[ae-B-1],T);Vn(),Tt=!1}a=!0}if(mn(St||Lt),ee||(at=ot=!1),Qe!==h&&(Qe?addEvents:removeEvents)(D,Pt),_e!==m&&(_e?I?showElement(I):(F&&showElement(F),z&&showElement(z)):I?hideElement(I):(F&&hideElement(F),z&&hideElement(z))),Ue!==p&&(Ue?(showElement(W),Fa()):hideElement(W)),Ze!==g&&(Ze?addEvents(j,Dt,P.preventScrollOnTouch):removeEvents(j,Dt)),et!==y&&(et?addEvents:removeEvents)(j,Ot),ee!==C&&(ee?(V&&showElement(V),Be||Re||Sa()):(V&&hideElement(V),Be&&Aa())),at!==E&&(at?addEvents:removeEvents)(j,Rt),ot!==x&&(ot?addEvents:removeEvents)(D,Nt),t?(X===r&&J===l||(a=!0),Ke===i||Ke||(ze.style.height=""),_e&&Je!==s&&(F.innerHTML=Je[0],z.innerHTML=Je[1]),V&&nt!==u&&(n=ee?1:0,v=(f=V.innerHTML).length-u[n].length,f.substring(v)===u[n])&&(V.innerHTML=f.substring(0,v)+nt[n])):J&&(X||Q)&&(a=!0),(o||X&&!Q)&&(ge=Ia(),Fa()),(h=oe!==b)?(re.emit("indexChanged",le()),a=!0):o?h||Zn():(X||Q)&&(Xn(),aa(),$n()),o&&!H){for(var k=oe+Math.min(G,U),R=ae;R--;){var N=$[R];oe<=R&&R<k?(addClass(N,"tns-moving"),N.style.left=100*(R-oe)/U+"%",addClass(N,ce),removeClass(N,fe)):N.style.left&&(N.style.left="",addClass(N,fe),removeClass(N,ce)),removeClass(N,de)}setTimeout(function(){forEach($,function(e){removeClass(e,"tns-moving")})},300)}St||Lt||(t&&!ue&&(Y===d&&K===c||(ze.style.cssText=Sn(Y,K,X,Xe,Ke)),q)&&(H&&(j.style.width=An(X,K,U)),m=Mn(X,K,U)+Ln(K),removeCSSRule(te,getCssRulesLength(te)-1),addCSSRule(te,"#"+ie+" > .tns-item",m,getCssRulesLength(te))),Ke&&Jn(),a&&(va(),mt=oe)),t&&re.emit("newBreakpointEnd",le(e))}}function Fn(){var e,t;return X||Q?(e=X?(X+K)*G:i[G],t=Y?_+2*Y:_+K,J&&(t-=X?(_-X)/2:(_-(i[oe+1]-i[oe]-K))/2),e<=t):G<=(J?U-(U-1)/2:U)}function zn(){for(var e in he=0,O)(e=parseInt(e))<=qe&&(he=e)}function Wn(){!ee&&V&&hideElement(V),!Ue&&W&&hideElement(W),_e||(I?hideElement(I):(F&&hideElement(F),z&&hideElement(z)))}function Vn(){ee&&V&&showElement(V),Ue&&W&&showElement(W),_e&&(I?showElement(I):(F&&showElement(F),z&&showElement(z)))}function qn(){if(!Tt){if(Y&&(ze.style.margin="0px"),ne)for(var e="tns-transparent",t=ne;t--;)H&&addClass($[t],e),addClass($[ae-t-1],e);Wn(),Tt=!0}}function jn(){if(!At){if(te.disabled=!0,j.className=j.className.replace(wt.substring(1),""),removeAttrs(j,["style"]),Z)for(var e=ne;e--;)H&&hideElement($[e]),hideElement($[ae-e-1]);if(q&&H||removeAttrs(ze,["style"]),!H)for(var t=oe,n=oe+G;t<n;t++){var a=$[t];removeAttrs(a,["style"]),removeClass(a,ce),removeClass(a,fe)}Wn(),At=!0}}function $n(){var e=Gn();L.innerHTML!==e&&(L.innerHTML=e)}function Gn(){var e=Qn(),t=e[0]+1,e=e[1]+1;return t===e?t+"":t+" to "+e}function Qn(e){null==e&&(e=fa());var n,a,o,r=oe;return J||Y?(Q||X)&&(n=-(parseFloat(e)+Y),a=n+_+2*Y):Q&&(n=i[oe],a=n+_),Q?i.forEach(function(e,t){t<ae&&((J||Y)&&e<=n+.5&&(r=t),.5<=a-e)&&(o=t)}):(o=X?(e=X+K,J||Y?(r=Math.floor(n/e),Math.ceil(a/e-1)):r+Math.ceil(_/e)-1):J||Y?(e=U-1,o=J?(r-=e/2,oe+e/2):oe+e,Y&&(r-=e=Y*U/_,o+=e),r=Math.floor(r),Math.ceil(o)):r+U-1,r=Math.max(r,0),o=Math.min(o,ae-1)),[r,o]}function Xn(){var e;rt&&!St&&((e=Qn()).push(it),_n.apply(null,e).forEach(function(e){var t;hasClass(e,jt)||((t={})[m]=function(e){e.stopPropagation()},addEvents(e,t),addEvents(e,$t),e.src=getAttr(e,"data-src"),(t=getAttr(e,"data-srcset"))&&(e.srcset=t),addClass(e,"loading"))}))}function Yn(e){addClass(e,"loaded"),Kn(e)}function Kn(e){addClass(e,jt),removeClass(e,"loading"),removeEvents(e,$t)}function _n(e,t,n){var a=[];for(n=n||"img";e<=t;)forEach($[e].querySelectorAll(n),function(e){a.push(e)}),e++;return a}function Jn(){var e=_n.apply(null,Qn());raf(function(){Un(e,ta)})}function Un(n,e){return!M&&(n.forEach(function(e,t){!rt&&e.complete&&Kn(e),hasClass(e,jt)&&n.splice(t,1)}),n.length)?void raf(function(){Un(n,e)}):e()}function Zn(){var e,t;Xn(),aa(),$n(),la(),Ue&&(Ee=0<=Ce?Ce:Cn(),Ce=-1,Ee!==xe)&&(e=pe[xe],t=pe[Ee],setAttrs(e,{tabindex:"-1","aria-label":we+(xe+1)}),removeClass(e,be),setAttrs(t,{"aria-label":we+(Ee+1)+Se}),removeAttrs(t,"tabindex"),addClass(t,be),xe=Ee)}function ea(e,t){for(var n=[],a=e,o=Math.min(e+t,ae);a<o;a++)n.push($[a].offsetHeight);return Math.max.apply(null,n)}function ta(){var e=Ke?ea(oe,U):ea(ne,G),t=S||ze;t.style.height!==e&&(t.style.height=e+"px")}function na(){i=[0];var n=q?"left":"top",a=q?"right":"bottom",o=$[0].getBoundingClientRect()[n];forEach($,function(e,t){t&&i.push(e.getBoundingClientRect()[n]-o),t===ae-1&&i.push(e.getBoundingClientRect()[a]-o)})}function aa(){var e=Qn(),n=e[0],a=e[1];forEach($,function(e,t){n<=t&&t<=a?hasAttr(e,"aria-hidden")&&(removeAttrs(e,["aria-hidden","tabindex"]),addClass(e,Vt)):hasAttr(e,"aria-hidden")||(setAttrs(e,{"aria-hidden":"true",tabindex:"-1"}),removeClass(e,Vt))})}function oa(e){return e.nodeName.toLowerCase()}function ra(e){return"button"===oa(e)}function ia(e){return"true"===e.getAttribute("aria-disabled")}function sa(e,t,n){e?t.disabled=n:t.setAttribute("aria-disabled",n.toString())}function la(){var e,t,n,a;!_e||Ye||Z||(e=R?F.disabled:ia(F),t=N?z.disabled:ia(z),a=!Ye&&gt<=oe,(n=oe<=pt)&&!e&&sa(R,F,!0),!n&&e&&sa(R,F,!1),a&&!t&&sa(N,z,!0),!a&&t&&sa(N,z,!1))}function ua(e,t){s&&(e.style[s]=t)}function ca(e){return null==e&&(e=oe),Q?(_-(Y?K:0)-(i[e+1]-i[e]-K))/2:X?(_-X)/2:(U-1)/2}function da(){var e=_+(Y?K:0)-(X?(X+K)*ae:i[ae]);return e=0<(e=J&&!Z?X?-(X+K)*(ae-1)-ca():ca(ae-1)-i[ae-1]:e)?0:e}function fa(e){var t,n;return null==e&&(e=oe),q&&!Q?X?(t=-(X+K)*e,J&&(t+=ca())):(n=d?ae:U,J&&(e-=ca()),t=100*-e/n):(t=-i[e],J&&Q&&(t+=ca())),lt&&(t=Math.max(t,ut)),t+=!q||Q||X?"px":"%"}function va(e){ua(j,"0s"),ha(e)}function ha(e){null==e&&(e=fa()),j.style[dt]=ft+e+vt}function ma(e,t,n,a){var o=e+U;Z||(o=Math.min(o,ae));for(var r=e;r<o;r++){var i=$[r];a||(i.style.left=100*(r-oe)/U+"%"),E&&f&&(i.style[f]=i.style[h]=E*(r-e)/1e3+"s"),removeClass(i,t),addClass(i,n),a&&st.push(i)}}function pa(e,t){ct&&vn(),oe===mt&&!t||(re.emit("indexChanged",le()),re.emit("transitionStart",le()),Ke&&Jn(),Be&&e&&0<=["click","keydown"].indexOf(e.type)&&Aa(),xt=!0,hn())}function ga(e){return e.toLowerCase().replace(/-/g,"")}function ya(e){if(H||xt){if(re.emit("transitionEnd",le(e)),!H&&0<st.length)for(var t=0;t<st.length;t++){var n=st[t];n.style.left="",h&&f&&(n.style[h]="",n.style[f]=""),removeClass(n,de),addClass(n,fe)}(!e||!H&&e.target.parentNode===j||e.target===j&&ga(e.propertyName)===ga(dt))&&(ct||(e=oe,vn(),oe!==e&&(re.emit("indexChanged",le()),va())),"inner"===ve&&re.emit("innerLoaded",le()),xt=!1,mt=oe)}}function Ca(e,t){if(!Lt)if("prev"===e)Ea(t,-1);else if("next"===e)Ea(t,1);else{if(xt){if(yt)return;ya()}var n=yn(),a=0;"first"===e?a=-n:"last"===e?a=H?G-U-n:G-1-n:("number"!=typeof e&&(e=parseInt(e)),isNaN(e)||(a=(e=t?e:Math.max(0,Math.min(G-1,e)))-n)),!H&&a&&Math.abs(a)<U&&(e=0<a?1:-1,a+=pt<=oe+a-G?G*e:2*G*e*-1),oe+=a,H&&Z&&(oe<pt&&(oe+=G),gt<oe)&&(oe-=G),yn(oe)!==yn(mt)&&pa(t)}}function Ea(e,t){if(xt){if(yt)return;ya()}var n;if(!t){for(var a=Ba(e=Ta(e));a!==I&&[F,z].indexOf(a)<0;)a=a.parentNode;var o=[F,z].indexOf(a);0<=o&&(n=!0,t=0===o?-1:1)}if(Ye){if(oe===pt&&-1===t)return void Ca("last",e);if(oe===gt&&1===t)return void Ca("first",e)}t&&(oe+=$e*t,Q&&(oe=Math.floor(oe)),pa(n||e&&"keydown"===e.type?e:null))}function xa(){Te=setInterval(function(){Ea(null,Ae)},tt),Be=!0}function ba(){clearInterval(Te),Be=!1}function wa(e,t){setAttrs(V,{"data-action":e}),V.innerHTML=Le[0]+e+Le[1]+t}function Sa(){xa(),V&&wa("stop",nt[1])}function Aa(){ba(),V&&wa("start",nt[0])}function Ma(){Re=Be?(Aa(),!0):(Sa(),!1)}function La(e){e.focus()}function Ta(e){return ka(e=e||a.event)?e.changedTouches[0]:e}function Ba(e){return e.target||a.event.srcElement}function ka(e){return 0<=e.type.indexOf("touch")}function Ra(e){e.preventDefault?e.preventDefault():e.returnValue=!1}function Na(){return getTouchDirection(toDegree(De.y-Pe.y,De.x-Pe.x),Ct)===P.axis}function Pa(e){if(xt){if(yt)return;ya()}ee&&Be&&ba(),He=!0,Ie&&(caf(Ie),Ie=null);var t=Ta(e);re.emit(ka(e)?"touchStart":"dragStart",le(e)),!ka(e)&&0<=["img","a"].indexOf(oa(Ba(e)))&&Ra(e),De.x=Pe.x=t.clientX,De.y=Pe.y=t.clientY,H&&(Oe=parseFloat(j.style[dt].replace(ft,"")),ua(j,"0s"))}function Da(e){var t;He&&(t=Ta(e),De.x=t.clientX,De.y=t.clientY,H?Ie=Ie||raf(function(){!function e(t){if(!Et)return void(He=!1);caf(Ie);He&&(Ie=raf(function(){e(t)}));"?"===Et&&(Et=Na());if(Et){!Gt&&ka(t)&&(Gt=!0);try{t.type&&re.emit(ka(t)?"touchMove":"dragMove",le(t))}catch(e){}var n=Oe,a=Fe(De,Pe);n=!q||X||Q?n+a+"px":n+(d?a*U*100/((_+K)*ae):100*a/(_+K))+"%",j.style[dt]=ft+n+vt}}(e)}):(Et="?"===Et?Na():Et)&&(Gt=!0),"boolean"!=typeof e.cancelable||e.cancelable)&&Gt&&e.preventDefault()}function Oa(a){var e,o,n;He&&(Ie&&(caf(Ie),Ie=null),H&&ua(j,""),He=!1,e=Ta(a),De.x=e.clientX,De.y=e.clientY,o=Fe(De,Pe),Math.abs(o))&&(ka(a)||addEvents(n=Ba(a),{click:function e(t){Ra(t),removeEvents(n,{click:e})}}),H?Ie=raf(function(){if(q&&!Q){var e=-o*U/(_+K),e=0<o?Math.floor(e):Math.ceil(e);oe+=e}else{var t=-(Oe+o);if(t<=0)oe=pt;else if(t>=i[ae-1])oe=gt;else for(var n=0;n<ae&&t>=i[n];)t>i[oe=n]&&o<0&&(oe+=1),n++}pa(a,o),re.emit(ka(a)?"touchEnd":"dragEnd",le(a))}):Et&&Ea(a,0<o?-1:1)),"auto"===P.preventScrollOnTouch&&(Gt=!1),Ct&&(Et="?"),ee&&!Be&&xa()}function Ha(){(S||ze).style.height=i[oe+U]-i[oe]+"px"}function Ia(){var e=X?(X+K)*G/_:G/U;return Math.min(Math.ceil(e),G)}function Fa(){if(Ue&&!Ft&&ge!==ye){var e=ye,t=ge,n=showElement;for(ge<ye&&(e=ge,t=ye,n=hideElement);e<t;)n(pe[e]),e++;ye=ge}}function le(e){return{container:j,slideItems:$,navContainer:W,navItems:pe,controlsContainer:I,hasControls:Ht,prevButton:F,nextButton:z,items:U,slideBy:$e,cloneCount:ne,slideCount:G,slideCountNew:ae,index:oe,indexCached:mt,displayIndex:pn(),navCurrentIndex:Ee,navCurrentIndexCached:xe,pages:ge,pagesCached:ye,sheet:te,isOn:je,event:e||{}}}g&&console.warn("No slides found in",P.container)};exports.tns=tns;
Array.prototype.forEach||(Array.prototype.forEach=function(e,t){for(var n=this.length>>>0,r=0;r<n;r++)r in this&&e.call(t,this[r],r,this)}),Array.prototype.map||(Array.prototype.map=function(e){var t=this.length>>>0;if("function"!=typeof e)throw new TypeError;for(var n=new Array(t),r=arguments[1],o=0;o<t;o++)o in this&&(n[o]=e.call(r,this[o],o,this));return n}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var t=this.length;if(t){var n=arguments[1]||0;if(!(t<=n))for(n<0&&(n+=t);n<t;n++)if(Object.prototype.hasOwnProperty.call(this,n)&&e===this[n])return n}return-1}),function(){var p,e,t;Element.prototype.addEventListener||(p=[],e=function(e,t){function n(e){e.target=e.srcElement,e.currentTarget=i,void 0!==t.handleEvent?t.handleEvent(e):t.call(i,e)}var r,o,i=this;"DOMContentLoaded"==e?(r=function(e){"complete"==document.readyState&&n(e)},document.attachEvent("onreadystatechange",r),p.push({object:this,type:e,listener:t,wrapper:r}),"complete"==document.readyState&&((o=new Event).srcElement=window,r(o))):(this.attachEvent("on"+e,n),p.push({object:this,type:e,listener:t,wrapper:n}))},t=function(e,t){for(var n=0;n<p.length;){var r=p[n];if(r.object==this&&r.type==e&&r.listener==t){"DOMContentLoaded"==e?this.detachEvent("onreadystatechange",r.wrapper):this.detachEvent("on"+e,r.wrapper),p.splice(n,1);break}++n}},Element.prototype.addEventListener=e,Element.prototype.removeEventListener=t,HTMLDocument&&(HTMLDocument.prototype.addEventListener=e,HTMLDocument.prototype.removeEventListener=t),Window&&(Window.prototype.addEventListener=e,Window.prototype.removeEventListener=t))}(),"firstElementChild"in document.documentElement||Object.defineProperty(Element.prototype,"firstElementChild",{get:function(){for(var e,t=this.children,n=0,r=t.length;n<r;++n)if(1===(e=t[n]).nodeType)return e;return null}}),"previousElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"previousElementSibling",{get:function(){for(var e=this.previousSibling;e&&1!==e.nodeType;)e=e.previousSibling;return e}}),"nextElementSibling"in document.documentElement||Object.defineProperty(Element.prototype,"nextElementSibling",{get:function(){for(var e=this.nextSibling;e&&1!==e.nodeType;)e=e.nextSibling;return e}}),window.getComputedStyle||(window.getComputedStyle=function(e){if(!e)return null;var t,n=e.currentStyle,e=e.getBoundingClientRect(),r=document.createElement("div").style;for(t in n)r[t]=n[t];return r.cssFloat=r.styleFloat,"auto"===r.width&&(r.width=e.right-e.left+"px"),"auto"===r.height&&(r.height=e.bottom-e.top+"px"),r});
var CountUp=function(a,n,t,e,i,r){var o=this;if(o.version=function(){return"1.9.3"},o.options={useEasing:!0,useGrouping:!0,separator:",",decimal:".",easingFn:function(a,n,t,e){return t*(1-Math.pow(2,-10*a/e))*1024/1023+n},formattingFn:function(a){var n,t,e,i,r=a<0;if(a=Math.abs(a).toFixed(o.decimals),a=(a+="").split("."),n=a[0],a=1<a.length?o.options.decimal+a[1]:"",o.options.useGrouping){for(t="",e=0,i=n.length;e<i;++e)0!==e&&e%3==0&&(t=o.options.separator+t),t=n[i-e-1]+t;n=t}o.options.numerals.length&&(n=n.replace(/[0-9]/g,function(a){return o.options.numerals[+a]}),a=a.replace(/[0-9]/g,function(a){return o.options.numerals[+a]}));return(r?"-":"")+o.options.prefix+n+a+o.options.suffix},prefix:"",suffix:"",numerals:[]},r&&"object"==typeof r)for(var s in o.options)r.hasOwnProperty(s)&&null!==r[s]&&(o.options[s]=r[s]);""===o.options.separator?o.options.useGrouping=!1:o.options.separator=""+o.options.separator;for(var l=0,u=["webkit","moz","ms","o"],m=0;m<u.length&&!window.requestAnimationFrame;++m)window.requestAnimationFrame=window[u[m]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[u[m]+"CancelAnimationFrame"]||window[u[m]+"CancelRequestAnimationFrame"];function d(a){return"number"==typeof a&&!isNaN(a)}window.requestAnimationFrame||(window.requestAnimationFrame=function(a,n){var t=(new Date).getTime(),e=Math.max(0,16-(t-l)),i=window.setTimeout(function(){a(t+e)},e);return l=t+e,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(a){clearTimeout(a)}),o.initialize=function(){return!!o.initialized||(o.error="",o.d="string"==typeof a?document.getElementById(a):a,o.d?(o.startVal=Number(n),o.endVal=Number(t),d(o.startVal)&&d(o.endVal)?(o.decimals=Math.max(0,e||0),o.dec=Math.pow(10,o.decimals),o.duration=1e3*Number(i)||2e3,o.countDown=o.startVal>o.endVal,o.frameVal=o.startVal,o.initialized=!0):(o.error="[CountUp] startVal ("+n+") or endVal ("+t+") is not a number",!1)):!(o.error="[CountUp] target is null or undefined"))},o.printValue=function(a){a=o.options.formattingFn(a);"INPUT"===o.d.tagName?this.d.value=a:"text"===o.d.tagName||"tspan"===o.d.tagName?this.d.textContent=a:this.d.innerHTML=a},o.count=function(a){o.startTime||(o.startTime=a);a=(o.timestamp=a)-o.startTime;o.remaining=o.duration-a,o.options.useEasing?o.countDown?o.frameVal=o.startVal-o.options.easingFn(a,0,o.startVal-o.endVal,o.duration):o.frameVal=o.options.easingFn(a,o.startVal,o.endVal-o.startVal,o.duration):o.countDown?o.frameVal=o.startVal-(o.startVal-o.endVal)*(a/o.duration):o.frameVal=o.startVal+(o.endVal-o.startVal)*(a/o.duration),o.countDown?o.frameVal=o.frameVal<o.endVal?o.endVal:o.frameVal:o.frameVal=o.frameVal>o.endVal?o.endVal:o.frameVal,o.frameVal=Math.round(o.frameVal*o.dec)/o.dec,o.printValue(o.frameVal),a<o.duration?o.rAF=requestAnimationFrame(o.count):o.callback&&o.callback()},o.start=function(a){o.initialize()&&(o.callback=a,o.rAF=requestAnimationFrame(o.count))},o.pauseResume=function(){o.paused?(o.paused=!1,delete o.startTime,o.duration=o.remaining,o.startVal=o.frameVal,requestAnimationFrame(o.count)):(o.paused=!0,cancelAnimationFrame(o.rAF))},o.reset=function(){o.paused=!1,delete o.startTime,o.initialized=!1,o.initialize()&&(cancelAnimationFrame(o.rAF),o.printValue(o.startVal))},o.update=function(a){o.initialize()&&(d(a=Number(a))?(o.error="",a!==o.frameVal&&(cancelAnimationFrame(o.rAF),o.paused=!1,delete o.startTime,o.startVal=o.frameVal,o.endVal=a,o.countDown=o.startVal>o.endVal,o.rAF=requestAnimationFrame(o.count))):o.error="[CountUp] update() - new endVal is not a number: "+a)},o.initialize()&&o.printValue(o.startVal)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
