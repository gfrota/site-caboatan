"use strict";
var banner = document.querySelector("#banner");
banner &&
    (document.addEventListener("DOMContentLoaded", function () {
        banner.classList.add("on");
    }),
    window.innerWidth < 1024
        ? tns({ container: banner.querySelector(".mobile"), items: 1, mouseDrag: !0, nav: !0, controls: !1, loop: !0, slideBy: 1, center: !0, edgePadding: 0, speed: 850, autoplay: !0, autoplayButtonOutput: !1 })
        : tns({ container: banner.querySelector(".hd"), items: 1, mouseDrag: !0, nav: !0, controls: !1, loop: !0, slideBy: 1, center: !0, edgePadding: 0, speed: 850, autoplay: !0, autoplayButtonOutput: !1 }));
("use strict");
var contentMobile,
    bike = document.getElementById("bike");
bike &&
    ((function () {
        for (var i = bike.querySelectorAll(".tab>input[type=checkbox]"), e = 0; e < i.length; e++) {
            var t = i[e];
            (t.checked = !1), $(t).closest(".content").slideUp(1500);
        }
        (i[0].checked = !0), window.innerWidth <= 1024 && $(document).find("#bike .bikeMobile .content>div").eq(0).slideDown(1500), $(i[0]).closest(".content-mobile").slideDown(1500);
        for (var n = 0; n < i.length; n++)
            !(function (e) {
                var o = i[e];
                $(o)
                    .unbind("change")
                    .change(function (e) {
                        e.stopPropagation(), e.preventDefault(), e.stopImmediatePropagation();
                        for (var e = !!o.checked, t = 0; t < i.length; t++) {
                            var n = i[t];
                            (n.checked = !1), $(n).closest(".content-mobile").slideUp(1500);
                        }
                        (o.checked = e),
                            o.checked ? $(o).closest(".content-mobile").slideDown(1500) : $(o).closest(".content-mobile").slideUp(1500),
                            window.innerWidth <= 1024 &&
                                ((e = $(o).attr("id")),
                                $(o)
                                    .closest(".bikeMobile")
                                    .find(".content>div:not(#" + e + ")")
                                    .slideUp(600),
                                $(o)
                                    .closest(".bikeMobile")
                                    .find(".content>div#" + e)
                                    .slideDown(600));
                    });
            })(n);
    })(),
    (function () {
        for (var i = bike.querySelectorAll(".tabDesk>input[type=checkbox]"), e = 0; e < i.length; e++)
            !(function (e) {
                var o = i[e];
                $(o)
                    .unbind("change")
                    .change(function (e) {
                        e.stopPropagation(), e.preventDefault(), e.stopImmediatePropagation();
                        for (var e = !!o.checked, t = 0; t < i.length; t++) {
                            var n = i[t];
                            (n.checked = !1), $(n).parent().find(".content-desktop").animate({ opacity: 0, display: "none" }, 700);
                        }
                        (o.checked = e), o.checked ? $(o).parent().find(".content-desktop").animate({ opacity: 1 }, 700) : $(o).parent().find(".content-desktop").animate({ opacity: 0, display: "none" }, 700);
                        e = $(o).attr("id");
                        $(o)
                            .closest(".bikeDesktop")
                            .find(".content>div:not(#" + e + ")")
                            .animate({ opacity: 0, display: "none" }, 700),
                            $(o)
                                .closest(".bikeDesktop")
                                .find(".content>div#" + e)
                                .animate({ opacity: 1 }, 700);
                    });
            })(e);
    })(),
    window.innerWidth < 1024 &&
        ((contentMobile = bike.querySelector(".content-mobile-tns")),
        tns({
            container: contentMobile,
            center: !1,
            loop: !0,
            rewind: !0,
            nav: !1,
            autoWidth: !0,
            items: 1,
            slideBy: 1,
            speed: 1500,
            mouseDrag: !0,
            autoplay: !0,
            autoplayHoverPause: !0,
            autoplayTimeout: 3500,
            controls: !1,
            autoplayButtonOutput: !1,
        })),
    bike.contains(bike.querySelector("[data-modal=ficha-tecnica]"))) &&
    !(function () {
        var e = bike.querySelectorAll("[data-btnModal=ficha-tecnica]"),
            t = bike.querySelector("[data-modal=ficha-tecnica]"),
            n = t.querySelector(".close-modal");
        e.forEach(function (e) {
            e.addEventListener("click", function (e) {
                e.preventDefault(), t.classList.add("active");
            });
        }),
            n.addEventListener("click", function (e) {
                t.classList.remove("active");
            });
    })();
("use strict");
var boxes = document.querySelectorAll(".box-splits");
if (boxes) {
    for (
        var _loop = function (e) {
                var o = boxes[e].offsetTop;
                function t() {
                    (document.body.scrollTop || document.documentElement.scrollTop) + window.innerHeight > o && (boxes[e].classList.add("on"), window.removeEventListener("scroll", t));
                }
                window.addEventListener("scroll", t), window.addEventListener("DOMContentLoaded", t);
            },
            i = 0;
        i < boxes.length;
        i++
    )
        _loop(i);
    !(function () {
        var n = document.querySelector(".modal-video-box-split");
        if (n)
            for (var i = void 0, d = !1, e = 0; e < boxes.length; e++)
                !(function (e) {
                    var o = boxes[e].querySelector("a.openVideo"),
                        e = document.querySelector(".modal-video-box-split"),
                        t = getYouTubeID(n.dataset.video);
                    o &&
                        (o.addEventListener("click", function e() {
                            (i = new YT.Player(n.querySelector(".video-content"), {
                                height: "520",
                                width: "700",
                                videoId: t,
                                playerVars: { rel: 0 },
                                events: {
                                    onReady: function () {
                                        (d = !0), i.playVideo();
                                    },
                                },
                            })),
                                o.removeEventListener("click", e);
                        }),
                        o.addEventListener("click", function (e) {
                            e.preventDefault(), n.classList.add("opened"), d && i.playVideo();
                        }),
                        e.addEventListener("click", function (e) {
                            e.preventDefault(), i.stopVideo(), n.classList.remove("opened");
                        }));
                })(e);
    })();
}
("use strict");
("use strict");
var headerBlock = document.getElementById("header");
headerBlock &&
    headerBlock.classList.contains("header-block") &&
    ((function () {
        var d = headerBlock.querySelector(".menu"),
            e = d.querySelectorAll("a:not(:last-child)"),
            n = d.querySelector("hr"),
            o = Math.round(n.offsetWidth / 4),
            r = [];
        function c(e) {
            var t = e.offsetWidth,
                e = e.offsetLeft,
                e = Math.round(e + t / 2 - 13);
            n.style.left = e - o + "px";
        }
        function t() {
            for (var e = document.documentElement.scrollTop, t = (headerBlock.offsetHeight, 0); t < r.length; t++) {
                var n = document.querySelector(r[t]);
                if (n)
                    if (n.offsetTop < e + 200 && 1024 < window.innerWidth) {
                        n = d.querySelector('a[href="' + r[t] + '"]');
                        c(n);
                        for (var o = 0; o < d.querySelectorAll("a").length; o++) d.querySelectorAll("a")[o].classList.remove("active");
                        n.classList.add("active");
                    }
            }
        }
        for (var a = 0; a < e.length; a++)
            r.push(e[a].hash),
                e[a].addEventListener("mouseover", function () {
                    c(this);
                }),
                e[a].addEventListener("mouseout", function () {
                    t();
                });
        (r = r.filter(function (e) {
            return "" != e;
        })),
            window.addEventListener("scroll", t),
            document.addEventListener("DOMContentLoaded", t);
    })(),
    (function () {
        var e = document.getElementById("burguer-menu");
        e.addEventListener("change", function () {
            1 == e.checked ? document.querySelector("body").classList.add("hidden") : document.querySelector("body").classList.remove("hidden");
        });
    })(),
    (function () {
        var e = document.querySelectorAll("main>section input.card"),
            t = document.querySelector(".alterar-cidade");
        0 < e.length &&
            e.forEach(function (e) {
                e.addEventListener("change", function () {
                    1 == e.checked && t.classList.remove("hidden-xs");
                });
            }),
            t.addEventListener("click", function () {
                t.classList.add("hidden-xs");
            });
    })(),
    (function () {
        var e = document.getElementById("header");
        function t() {
            30 < document.documentElement.scrollTop ? e.classList.add("on") : e.classList.remove("on");
        }
        window.addEventListener("scroll", t), window.addEventListener("DOMContentLoaded", t);
    })());
("use strict");
var informacoes2colunas = document.getElementById("box-informacoes");
informacoes2colunas &&
    ((function () {
        function e() {
            (document.body.scrollTop || document.documentElement.scrollTop) + window.innerHeight > informacoes2colunas.offsetTop && (informacoes2colunas.classList.add("on"), window.removeEventListener("scroll", e));
        }
        window.addEventListener("scroll", e), window.addEventListener("DOMContentLoaded", e);
    })(),
    (function () {
        for (
            var l = informacoes2colunas.querySelectorAll(".tab>input[type=checkbox]"),
                e = ((l[0].checked = !0), (window.innerWidth <= 1024 ? l[0].parentNode.querySelector(".content") : informacoes2colunas.querySelectorAll(".infos-content .content")[0]).classList.add("on"), 0);
            e < l.length;
            e++
        )
            !(function (e) {
                var i = l[e],
                    r = (l[0].parentNode, informacoes2colunas.querySelector(".infos-content")),
                    s = i.getAttribute("id");
                i.addEventListener("change", function (e) {
                    e.stopPropagation(), e.preventDefault(), e.stopImmediatePropagation();
                    for (var e = !!i.checked, n = 0; n < l.length; n++) {
                        var o = l[n],
                            o = ((o.checked = !1), o.getAttribute("id"), o.parentNode);
                        (window.innerWidth <= 1024 ? o.children[2] : r.children[n]).classList.remove("on");
                    }
                    if (((i.checked = e), window.innerWidth <= 1024)) i.checked && i.nextElementSibling.nextElementSibling.classList.add("on");
                    else if (i.checked) for (var t = r.querySelectorAll(".content"), c = 0; c < t.length; c++) t[c].classList.contains(s) && t[c].classList.add("on");
                });
            })(e);
    })(),
    (function () {
        var n = informacoes2colunas.querySelector("div.regulamentoModal"),
            e = informacoes2colunas.querySelectorAll('a[href="#regulamentoModal"]'),
            o = n.querySelector(".close-regulamento");
        if (0 < e.length) {
            for (var t = 0; t < e.length; t++)
                e[t].addEventListener("click", function (e) {
                    e.preventDefault(),
                        n.classList.add("on"),
                        setTimeout(function () {
                            document.querySelector("body").classList.add("hidden");
                        }, 800);
                });
            o.addEventListener("click", function () {
                n.classList.remove("on"),
                    setTimeout(function () {
                        document.querySelector("body").classList.remove("hidden");
                    }, 800);
            });
        }
    })());
("use strict");
var enterkitsCaroussel,
    kitsCaroussel = document.getElementById("kits");
kitsCaroussel &&
    ((enterkitsCaroussel = function e() {
        (document.body.scrollTop || document.documentElement.scrollTop) + this.innerHeight > kitsCaroussel.offsetTop && (kitsCaroussel.classList.add("on"), window.removeEventListener("scroll", e));
    }),
    window.addEventListener("load", enterkitsCaroussel),
    window.addEventListener("scroll", enterkitsCaroussel),
    (function () {
        var e,
            t,
            o = kitsCaroussel.querySelector(".kits");
        4 < o.children.length || window.innerWidth < 1024
            ? ((e = document.querySelector("#prevKit")),
              (t = document.querySelector("#nextKit")),
              tns({
                  container: o,
                  items: 1,
                  mouseDrag: !0,
                  nav: !1,
                  loop: !1,
                  slideBy: 1,
                  prevButton: e,
                  nextButton: t,
                  gutter: 10,
                  fixedWidth: 300,
                  edgePadding: 40,
                  speed: 600,
                  responsive: { 1024: { items: 2, slideBy: "page", fixedWidth: window.innerWidth / 2 - 1, gutter: 5 }, 1600: { gutter: 50 } },
              }))
            : o.parentNode.classList.add("no-slider");
    })(),
    (function () {
        for (var o = kitsCaroussel.querySelectorAll("input[type=checkbox]"), e = 0; e < o.length; e++)
            !(function (t) {
                o[t].addEventListener("change", function () {
                    var e;
                    1024 < window.innerWidth
                        ? ((e = document.getElementById("header").offsetHeight),
                          $(document.documentElement)
                              .stop()
                              .delay(0)
                              .animate({ scrollTop: kitsCaroussel.offsetTop - e }, 1e3, "swing"))
                        : o[t].checked
                        ? ((kitsCaroussel.parentNode.querySelector(".modal-tamanhos").style.zIndex = 50), document.querySelector("body").classList.add("hidden"), document.querySelector("html").classList.add("hidden"))
                        : ((kitsCaroussel.parentNode.querySelector(".modal-tamanhos").style.zIndex = 10), document.querySelector("body").classList.remove("hidden"), document.querySelector("html").classList.remove("hidden"));
                });
            })(e);
    })(),
    (function () {
        for (
            var e = document.querySelectorAll("div.kit"),
                t = document.querySelector("#idEvento").value,
                d = document.querySelector("input.valorClubeO2").value,
                c = new Date().getTime(),
                u = c + 36e4,
                v = localStorage.getItem("tempo_" + t),
                o = 0;
            o < e.length;
            o++
        )
            !(function (o, r, n) {
                var s = n.querySelector(".valorDe span"),
                    a = n.querySelector(".valor strong"),
                    l = n.querySelector(".centavos");
                {
                    var i, e, t;
                    a.textContent ||
                        s.textContent ||
                        (v <= c
                            ? ((i = new XMLHttpRequest()).open("GET", "https://webservices.ativo.com/br/evento/valores-kit/" + o + "/" + r, !0),
                              i.send(),
                              (i.onreadystatechange = function () {
                                  var e, t;
                                  4 == i.readyState &&
                                      200 == i.status &&
                                      ((e = i.responseText),
                                      (e = JSON.parse(e).dados[0]).valor
                                          ? ((t = []),
                                            n.classList.contains("clubeO2")
                                                ? ((s.parentNode.innerHTML = "APENAS"), (e.valor = (parseFloat(e.valor.replace(",", ".")) + parseFloat(d.replace(",", "."))).toFixed(2).replace(".", ",")))
                                                : e.valor == e.valor_de
                                                ? (s.parentNode.innerHTML = "APENAS")
                                                : (s.innerHTML = e.valor_de),
                                            (t = e.valor.split(",")),
                                            n.classList.contains("gratis") || ((a.innerHTML = t[0]), (l.innerHTML = t[1])),
                                            localStorage.setItem("de_" + r + "_id_evento_" + o, e.valor_de),
                                            localStorage.setItem("valor_atual_" + r + "_id_evento_" + o, e.valor),
                                            localStorage.setItem("preco_" + r + "_id_evento_" + o, t[0]),
                                            localStorage.setItem("preco_virgula_" + r + "_id_evento_" + o, t[1]),
                                            localStorage.setItem("tempo_" + o, u))
                                          : n.classList.add("esgotado"));
                              }))
                            : (n.classList.contains("gratis") || (s.innerHTML = localStorage.getItem("de_" + r + "_id_evento_" + o)),
                              (e = localStorage.getItem("de_" + r + "_id_evento_" + o)),
                              (t = localStorage.getItem("valor_atual_" + r + "_id_evento_" + o)),
                              e == t && null != t && (s.parentNode.innerHTML = "APENAS"),
                              "0,00" == e && n.classList.add("gratis"),
                              n.classList.contains("clubeO2") && (s.parentNode.innerHTML = "APENAS"),
                              n.classList.contains("gratis") || ((a.innerHTML = localStorage.getItem("preco_" + r + "_id_evento_" + o)), (l.innerHTML = localStorage.getItem("preco_virgula_" + r + "_id_evento_" + o)))));
                }
            })(t, e[o].querySelector(".idCategoria").value, e[o]);
    })());
("use strict");
var modalGrupos = document.querySelector(".modal-grupos");
modalGrupos &&
    ($(modalGrupos).closest("section").attr("id", "modal-grupos"),
    document.addEventListener("DOMContentLoaded", function () {
        var e = document.getElementById("header");
        modalGrupos.querySelector(".close-grupos").addEventListener("click", function (e) {
            e.preventDefault(),
                modalGrupos.classList.remove("on"),
                setTimeout(function () {
                    document.querySelector("body").classList.remove("hidden");
                }, 300);
        }),
            e.addEventListener("click", function (e) {
                for (var o = e.target; o && "A" !== o.tagName; ) if (!(o = o.parentNode)) return;
                -1 < o.href.indexOf("#grupos") && (modalGrupos.classList.add("on"), document.querySelector("body").classList.add("hidden"));
            });
    }));
("use strict");
var modalInforme = document.getElementById("modal-informe");
modalInforme &&
    !(function () {
        var e = modalInforme.querySelector(".close");
        setTimeout(function () {
            modalInforme.classList.add("on"), document.querySelector("body").classList.add("hidden");
        }, 1e3),
            e.addEventListener("click", function (e) {
                e.preventDefault(),
                    modalInforme.classList.remove("on"),
                    setTimeout(function () {
                        document.querySelector("body").classList.remove("hidden");
                    }, 600);
            });
    })();
("use strict");
var modalidades = document.querySelector("#modalidades");
modalidades && window.innerWidth < 1024 && tns({ container: modalidades.querySelector(".container"), center: !0, loop: !1, nav: !1, fixedWidth: 250, gutter: 100, speed: 600, controlsText: ["<span></span>", "<span></span>"] });
("use strict");
var newsletter = document.getElementById("newsletter");
newsletter &&
    ((function () {
        var e = new XMLHttpRequest();
        e.open("GET", "http://geoip.ativo.com/", !0),
            (e.onload = function () {
                var e, t, o;
                200 <= this.status &&
                    this.status < 400 &&
                    ((e = (o = JSON.parse(this.response)).cidade),
                    (t = o.estado_code),
                    (o = o.pais_code),
                    (document.getElementById("cidadeNewsletter").value = e),
                    (document.getElementById("estadoNewsletter").value = t),
                    (document.getElementById("paisCadastro").value = o));
            }),
            e.send();
    })(),
    (function () {
        var l = newsletter.querySelector("form");
        l.addEventListener("submit", function (e) {
            e.preventDefault();
            var e = new XMLHttpRequest(),
                t = l.querySelector("#emailNewsletter").value,
                o = l.querySelector("#origemNewsletter").value,
                r = l.querySelector("#origemURL").value,
                s = l.querySelector("#siteOrigemNewsletter").value,
                a = l.querySelector("#urlNewsletter").value,
                i = l.querySelector("#optinNewsletter").value,
                a =
                    (e.open("POST", a),
                    (e.onreadystatechange = function () {
                        200 === this.status
                            ? (l.classList.add("on"),
                              setTimeout(function () {
                                  l.classList.remove("on");
                              }, 5e3),
                              (l.querySelector("#nomeNewsletter").value = ""),
                              (l.querySelector("#emailNewsletter").value = ""))
                            : (l.classList.add("off"),
                              setTimeout(function () {
                                  l.classList.remove("off");
                              }, 5e3));
                    }),
                    {
                        usuario_nome: "Esporte Social",
                        usuario_email: t,
                        origem_cidade: "origemCidade",
                        origem_estado: "origemEstado",
                        origem_pais: "origemPais",
                        origem_pais_cadastro: "origemPaisCadastro",
                        origem_descricao: o,
                        origem_url: r,
                        origem_id: s,
                        news_optin: i,
                    });
            e.send(JSON.stringify(a));
        });
    })());
("use strict");
("use strict");
var widget = document.querySelectorAll("div.logo-container.rodape-logos-inner");
0 < widget.length &&
    widget &&
    ((function (e, o) {
        for (; e.nodeName != o.toUpperCase(); ) if (!(e = e.parentNode)) return null;
        return e;
    })(widget[0], "section").id = "rodape-logos");
("use strict");
var skate = document.querySelector("#skate");
skate &&
    !(function () {
        var e;
        document.querySelector("input#openSkateRecordDesk") &&
            (e = document.querySelector("input#openSkateRecordDesk")).addEventListener("change", function () {
                1 == e.checked ? document.querySelector("body").classList.add("hidden") : document.querySelector("body").classList.remove("hidden");
            });
    })();
("use strict");
var sliderInfos = document.querySelector("#slider-infos");
sliderInfos &&
    (window.innerWidth < 1024 && tns({ container: sliderInfos.querySelector(".container"), center: !0, loop: !1, nav: !1, fixedWidth: 413, items: 1, slideBy: 1, speed: 600, controlsText: ["<span></span>", "<span></span>"] }),
    window.addEventListener("load", function () {
        sliderInfos.classList.add("on");
    }));
("use strict");
var tapume = document.querySelector("main#tapume");
tapume &&
    window.addEventListener("load", function () {
        tapume.classList.add("on");
    });
("use strict");
var openVideo,
    videoId,
    playerVideo,
    moduloVideo = document.getElementById("video");
moduloVideo &&
    ((openVideo = moduloVideo.querySelector("a.open")),
    (videoId = getYouTubeID(moduloVideo.dataset.url)),
    (playerVideo = void 0),
    (function () {
        function e() {
            (document.body.scrollTop || document.documentElement.scrollTop) + window.innerHeight > moduloVideo.offsetTop && (moduloVideo.classList.add("on"), window.removeEventListener("scroll", e));
        }
        window.addEventListener("scroll", e), window.addEventListener("DOMContentLoaded", e);
    })(),
    openVideo.addEventListener("click", function (e) {
        e.preventDefault(),
            openVideo.classList.add("opened"),
            (playerVideo = new YT.Player("iframeModuloVideo", {
                height: "520",
                width: "1360",
                videoId: videoId,
                playerVars: { rel: 0 },
                events: {
                    onReady: function () {
                        moduloVideo.querySelector(".iframe").classList.add("play"), playerVideo.playVideo();
                    },
                },
            }));
    }),
    (function () {
        var d = moduloVideo.querySelector("#abreCardVideo");
        window.innerWidth < 1024 &&
            d.addEventListener("change", function () {
                function e() {
                    o.checked || playerVideo.pauseVideo();
                }
                var o = document.getElementById("close-header");
                d.checked ? (openVideo.click(), o.addEventListener("change", e)) : o.removeEventListener("change", e);
            });
    })());
("use strict");
!(function () {
    for (var n = document.querySelectorAll("main>section input.card"), e = 0; e < n.length; e++)
        !(function (e) {
            var s = n[e];
            s.addEventListener("change", function (e) {
                for (var t, c = !!s.checked, d = 0; d < n.length; d++) n[d].checked = !1;
                (s.checked = c),
                    s.checked
                        ? (document.querySelector("body").classList.add("hidden"),
                          (t = document.getElementById("close-header")).classList.add("card"),
                          (t.checked = !0),
                          t.addEventListener("change", function () {
                              for (var e = 0; e < n.length; e++) n[e].checked = !1;
                              document.querySelector("body").classList.remove("hidden"),
                                  t.classList.remove("card"),
                                  document.querySelector("input#openSkateRecordMobile") && (document.querySelector("input#openSkateRecordMobile").checked = !1);
                          }))
                        : document.querySelector("body").classList.remove("hidden");
            });
        })(e);
})();
for (
    var imgURL,
        data,
        xhr,
        svgs_class = document.querySelectorAll("img[data-svg]"),
        _loop2 = function (e) {
            var d = svgs_class[e],
                s = document.createAttribute("class");
            (s.value = d.getAttribute("class")),
                (imgURL = d.getAttribute("data-svg")),
                (data = null),
                ((xhr = new XMLHttpRequest()).withCredentials = !1),
                xhr.addEventListener("readystatechange", function () {
                    if (4 === this.readyState) {
                        var e = this.responseText,
                            t = ((parent = d.parentNode), document.createElement("div"));
                        t.innerHTML = e;
                        for (var c = 0; c < t.childNodes.length; c++) "svg" == t.childNodes[c].tagName && (e = t.childNodes[c]);
                        void 0 !== s && (e.setAttributeNode(s), e.classList.add("on")), parent.replaceChild(e, d);
                    }
                }),
                xhr.open("GET", imgURL),
                xhr.send(data);
        },
        svgs_i = 0;
    svgs_i < svgs_class.length;
    svgs_i++
)
    _loop2(svgs_i);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJhbm5lci5qcyIsImJpa2UuanMiLCJib3gtc3BsaXQuanMiLCJjb21wcm9taXNzby5qcyIsImhlYWRlci1ibG9jay5qcyIsImluZm9ybWFjb2VzLTItY29sdW5hcy5qcyIsImtpdHMtY2Fyb3Vzc2VsLmpzIiwibW9kYWwtZ3J1cG9zLmpzIiwibW9kYWwtaW5mb3JtZS5qcyIsIm1vZGFsaWRhZGVzLmpzIiwibmV3c2xldHRlci5qcyIsInBlcmN1cnNvLXZpZGVvLmpzIiwicm9kYXBlLWxvZ29zLmpzIiwic2thdGUuanMiLCJzbGlkZXJJbmZvLmpzIiwidGFwdW1lLmpzIiwidmlkZW8tYmFubmVyLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJiYW5uZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZW50cmFkYXMiLCJhZGQiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwidG5zIiwiY29udGFpbmVyIiwiaXRlbXMiLCJtb3VzZURyYWciLCJuYXYiLCJjb250cm9scyIsImxvb3AiLCJzbGlkZUJ5IiwiY2VudGVyIiwiZWRnZVBhZGRpbmciLCJzcGVlZCIsIiQiLCJiaWtlIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbnB1dHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaiIsImJpa2VNb2JpbGUiLCJsZW5ndGgiLCJlbGVtZW50IiwiY2hlY2tlZCIsInNsaWRlVXAiLCJjbG9zZXN0IiwiZXEiLCJzbGlkZURvd24iLCJmaW5kIiwiaSIsIl9sb29wIiwiaW5wdXQiLCJ1bmJpbmQiLCJjaGFuZ2UiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJhdHVhbCIsImF0dHIiLCJ2YWxvciIsIl9sb29wMiIsImJpa2VEZXNrdG9wIiwiYW5pbWF0ZSIsIm9wYWNpdHkiLCJkaXNwbGF5IiwicGFyZW50IiwiY29udGVudE1vYmlsZSIsInJld2luZCIsImF1dG9XaWR0aCIsImF1dG9wbGF5IiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwiYXV0b3BsYXlUaW1lb3V0IiwiYXV0b3BsYXlCdXR0b25PdXRwdXQiLCJtb2RhbEJ0biIsImZvckVhY2giLCJidG4iLCJtb2RhbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xvc2VNb2RhbCIsImJveGVzIiwiYm94VG9wIiwib2Zmc2V0VG9wIiwiYm9keSIsInNjcm9sbFRvcCIsImVudGVyYm94U3BsaXQiLCJpbm5lckhlaWdodCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJtb2RhbFZpZGVvIiwicGxheWVyVmlkZW9Cb3hTcGxpdCIsIm9wZW5WaWRlbyIsImNsb3NlIiwiYWJyaXJWaWRlbyIsImdldFlvdVR1YmVJRCIsImRhdGFzZXQiLCJ2aWRlbyIsImNhcnJlZ2FyVmlkZW8iLCJZVCIsIlBsYXllciIsInZpZGVvQ2FycmVnYWRvIiwid2lkdGgiLCJ2aWRlb0lkIiwicGxheWVyVmFycyIsInBsYXlWaWRlbyIsImV2ZW50cyIsImFicmlyVmlkZW9Cb3hTcGxpdCIsInN0b3BWaWRlbyIsImhlYWRlckJsb2NrIiwibWVudSIsIm1lbnVJbmRpY2F0b3IiLCJib3RvZXMiLCJpbmRpY2F0b3IiLCJvZmZzZXRXaWR0aCIsImhhc2hzIiwibGVmdCIsImNlbnRyYWxpemFJbmRpY2F0b3IiLCJvZmZzZXRMZWZ0IiwiaW5kaWNhdG9yV2lkdGgiLCJyZWZlcmVuY2lhQW5jaG9yIiwiZG9jdW1lbnRFbGVtZW50IiwiaGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0IiwicmVmIiwiem9uYUF0dWFsIiwicmVtb3ZlIiwicHVzaCIsImhhc2giLCJmaWx0ZXIiLCJidXJndWVyIiwidG9nZ2xlQ2xvc2VCdXR0b24iLCJjYXJkcyIsImNsb3NlQnV0dG9uIiwiY2FyZCIsImhlYWRlciIsInNjcm9sbE1lbnUiLCJhY2hhdGFNZW51IiwiaW5mb3JtYWNvZXMyY29sdW5hcyIsImVudGVySW5mb3MiLCJhbmltYWNhb0VudHJhZGFJbmZvcyIsImNvbnRlbnQiLCJwYXJlbnROb2RlIiwiZ2V0QXR0cmlidXRlIiwiY29udGVudE1vYmlsZV94IiwidmFsb3JFIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiY29udGVudE9uIiwiYyIsIm1vZGFsUmVndWxhbWVudG8iLCJsaW5rUmVndWxhbWVudG8iLCJjbG9zZVJlZ3VsYW1lbnRvIiwiYWJyaXJNb2RhbFJlZ3VsYW1lbnRvIiwic2V0VGltZW91dCIsImxpbmtBdHVhbCIsImtpdHNDYXJvdXNzZWwiLCJlbnRlcmtpdHNDYXJvdXNzZWwiLCJuZXh0IiwiZWwiLCJzbGlkZXJLaXRzIiwiY2hpbGRyZW4iLCJwcmV2IiwicHJldkJ1dHRvbiIsIm5leHRCdXR0b24iLCJndXR0ZXIiLCJmaXhlZFdpZHRoIiwicmVzcG9uc2l2ZSIsInN0b3AiLCJkZWxheSIsInN0eWxlIiwiekluZGV4Iiwia2l0SXRlbSIsImlkRXZlbnRvIiwidmFsdWUiLCJ2YWxvckNsdWJlTzIiLCJob3JhQXR1YWwiLCJEYXRlIiwiZ2V0VGltZSIsImhvcmFBdHVhbE1haXMiLCJob3JhTG9jYWwiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiaWQiLCJjZW50cyIsInZhbG9yR3JhdGlzIiwiaWRDYXRlZ29yaWEiLCJkZSIsInRleHRDb250ZW50Iiwib3BlbiIsImtpdCIsInZhbG9yS2l0cyIsInByZWNvIiwidmFsb3JlcyIsInJlc3BvbnNlIiwiYWpheCIsInN0YXR1cyIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJkYWRvcyIsInZpcmd1bGEiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiaW5uZXJIVE1MIiwicmVzcG9uc2VUZXh0IiwicmVwbGFjZSIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwidmFsb3JfZGUiLCJzcGxpdCIsInNldEl0ZW0iLCJ2YWxvckxvY2FsIiwidmFsb3JBdHVhbCIsIm1vZGFsR3J1cG9zIiwidGFyZ2V0IiwidGFnTmFtZSIsImluZGV4T2YiLCJtb2RhbEluZm9ybWUiLCJtb2RhbGlkYWRlcyIsIm5ld3NsZXR0ZXIiLCJYTUxIdHRwUmVxdWVzdCIsInJlcXVlc3QiLCJnZW9Mb2NhbGl6YWNhbyIsImNpZGFkZSIsInRoaXMiLCJvbmxvYWQiLCJlc3RhZG8iLCJlc3RhZG9fY29kZSIsInBhaXMiLCJwYWlzX2NvZGUiLCJzZW5kIiwiZm9ybSIsInVzdWFyaW9FbWFpbCIsIm9yaWdlbVVybCIsIm9yaWdlbUlkIiwibmV3c09wdGluIiwidXN1YXJpb19ub21lIiwib3JpZ2VtX2NpZGFkZSIsIm9yaWdlbV9lc3RhZG8iLCJvcmlnZW1fcGFpcyIsIm9yaWdlbV9wYWlzX2NhZGFzdHJvIiwib3JpZ2VtX2Rlc2NyaWNhbyIsIm9yaWdlbURlc2NyaWNhbyIsIm9yaWdlbV91cmwiLCJvcmlnZW1faWQiLCJuZXdzX29wdGluIiwic3RyaW5naWZ5Iiwid2lkZ2V0IiwiY2xhenoiLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwiY2xvc2VzdEJ5Tm9kZSIsInNrYXRlIiwicmVjb3JkTW9iaWxlIiwib3BlblJlY29yZERlc2siLCJzbGlkZXJJbmZvcyIsInRhcHVtZSIsIm1vZHVsb1ZpZGVvIiwidXJsIiwiZW50ZXJWaWRlbyIsImFuaW1hY2FvRW50cmFkYVZpZGVvIiwicGxheWVyVmlkZW8iLCJtb2R1bG9EZVZpZGVvIiwibGFiZWxWaWRlbyIsImFicmVWaWRlb01vYmlsZSIsImNsb3NlVmlkZW9QYXVzZSIsInBhdXNlVmlkZW8iLCJuYXZlZ2FjYW9Nb2JpbGUiLCJjYXJkQXR1YWwiLCJpbWdVUkwiLCJpbWdDbGFzcyIsInN2Z3NfY2xhc3MiLCJzdmdzX2kiLCJzdmciLCJjcmVhdGVBdHRyaWJ1dGUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJ4aHIiLCJ0ZW1wRGl2IiwiY3JlYXRlRWxlbWVudCIsInN2Z19uZXciLCJjaGlsZE5vZGVzIiwic2V0QXR0cmlidXRlTm9kZSIsInJlcGxhY2VDaGlsZCJdLCJtYXBwaW5ncyI6ImFBQUEsSUFBTUEsT0FBU0MsU0FBU0MsY0FBYyxTQUF2QixFQUNaRixTQUFBQSxTQUFPRyxpQkFBQSxtQkFBQSxXQUNMSCxPQUFTSSxVQUFVQyxJ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ekwsU0FBU3FRLGNBQWMsS0FBdkIsR0FKVEMsRUFBVTVFLFVBQUtDLEVBRXBCLElBQUEsSUFBQTFKLEVBQUEsRUFBQUEsRUFBQW1PLEVBQUFHLFdBQUE5TyxPQUFBUSxDQUFBQSxHQUNBLE9BQUFpQixFQUFTOE0sV0FBVC9OLEdBQUFxSyxVQUNBZ0UsRUFBSUYsRUFBVXBRLFdBQVNxUSxJQUtIRSxLQUFBQSxJQUFsQkQsSUFDQUEsRUFBQUUsaUJBQUFYLENBQUEsRUFDRFMsRUFBQXhNLFVBQUExRCxJQUFBLElBQUEsR0FJQWtRLE9BQUFBLGFBQVFFLEVBQWlCWCxDQUF6QlMsQ0FFRCxDQU1BLENBL0JHakYsRUE0QkhuSSxJQUFBQSxLQUFPdU4sTUFBQUEsTUFBUHZOLEVBdkJEaU4sSUFBQTlDLEtBQUFoQyxJQUFBLEMsRUE5Q0YwRSxPQUFBLEVBQUFBLE9BQUFELFdBQUFyTyxPQUFBc08sTUFBQUEsR0FBQWxOLE9BQUFrTixNQUFBIiwiZmlsZSI6InNjcmlwdHMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYmFubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNiYW5uZXJcIik7XHJcbmlmKGJhbm5lcil7XHJcbiAgICAoZnVuY3Rpb24gZW50cmFkYXMoKXtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBiYW5uZXIuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSgpKTtcclxuXHJcbiAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQpe1xyXG4gICAgICAgIC8vIHRucyh7XHJcbiAgICAgICAgLy8gICAgIGNvbnRhaW5lcjogYmFubmVyLnF1ZXJ5U2VsZWN0b3IoXCIubW9iaWxlXCIpLFxyXG4gICAgICAgIC8vICAgICBjZW50ZXI6IGZhbHNlLFxyXG4gICAgICAgIC8vICAgICBsb29wOiB0cnVlLFxyXG4gICAgICAgIC8vICAgICBuYXY6IHRydWUsXHJcbiAgICAgICAgLy8gICAgIGNvbnRyb2xzOiBmYWxzZSxcclxuICAgICAgICAvLyAgICAgZml4ZWRXaWR0aDogMzc1LFxyXG4gICAgICAgIC8vICAgICBpdGVtczogMSxcclxuICAgICAgICAvLyAgICAgc2xpZGVCeTogMSxcclxuICAgICAgICAvLyAgICAgc3BlZWQ6IDYwMCxcclxuICAgICAgICAvLyAgICAgY29udHJvbHNUZXh0OiBbXCI8c3Bhbj48L3NwYW4+XCIsIFwiPHNwYW4+PC9zcGFuPlwiXSxcclxuICAgICAgICAvLyB9KTtcclxuICAgICAgICB0bnMoe1xyXG4gICAgICAgICAgICBjb250YWluZXI6IGJhbm5lci5xdWVyeVNlbGVjdG9yKFwiLm1vYmlsZVwiKSxcclxuICAgICAgICAgICAgaXRlbXM6IDEsXHJcbiAgICAgICAgICAgIG1vdXNlRHJhZzogdHJ1ZSxcclxuICAgICAgICAgICAgbmF2OiB0cnVlLFxyXG4gICAgICAgICAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlQnk6IDEsXHJcbiAgICAgICAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgZWRnZVBhZGRpbmc6IDAsXHJcbiAgICAgICAgICAgIHNwZWVkOiA4NTAsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRvcGxheUJ1dHRvbk91dHB1dDogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdG5zKHtcclxuICAgICAgICAgICAgY29udGFpbmVyOiBiYW5uZXIucXVlcnlTZWxlY3RvcihcIi5oZFwiKSxcclxuICAgICAgICAgICAgaXRlbXM6IDEsXHJcbiAgICAgICAgICAgIG1vdXNlRHJhZzogdHJ1ZSxcclxuICAgICAgICAgICAgbmF2OiB0cnVlLFxyXG4gICAgICAgICAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHNsaWRlQnk6IDEsXHJcbiAgICAgICAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgZWRnZVBhZGRpbmc6IDAsXHJcbiAgICAgICAgICAgIHNwZWVkOiA4NTAsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5OiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRvcGxheUJ1dHRvbk91dHB1dDogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImNvbnN0IGJpa2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJpa2VcIik7XHJcbmlmKGJpa2Upe1xyXG4gICAgKGZ1bmN0aW9uIGJpa2VNb2JpbGUoKXtcclxuICAgIGxldCBpbnB1dHMgPSBiaWtlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFiPmlucHV0W3R5cGU9Y2hlY2tib3hdXCIpO1xyXG4gICAgZm9yKGxldCBqPTA7ajxpbnB1dHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBpbnB1dHNbal07XHJcbiAgICAgICAgZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgJChlbGVtZW50KS5jbG9zZXN0KCcuY29udGVudCcpLnNsaWRlVXAoNjAwKTtcclxuICAgIH1cclxuICAgIGlucHV0c1swXS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpe1xyXG4gICAgICAgICQoZG9jdW1lbnQpLmZpbmQoXCIjYmlrZSAuYmlrZU1vYmlsZSAuY29udGVudD5kaXZcIikuZXEoMCkuc2xpZGVEb3duKDYwMCk7XHJcbiAgICB9XHJcbiAgICAkKGlucHV0c1swXSkuY2xvc2VzdCgnLmNvbnRlbnQtbW9iaWxlJykuc2xpZGVEb3duKDYwMCk7XHJcbiAgICBmb3IobGV0IGk9MDtpPGlucHV0cy5sZW5ndGg7aSsrKXtcclxuICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dHNbaV07XHJcbiAgICAgICAgJChpbnB1dCkudW5iaW5kKCdjaGFuZ2UnKS5jaGFuZ2UoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgbGV0IGF0dWFsID0gaW5wdXQuY2hlY2tlZCA/IHRydWU6IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IobGV0IGo9MDtqPGlucHV0cy5sZW5ndGg7aisrKXtcclxuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gaW5wdXRzW2pdO1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNsb3Nlc3QoJy5jb250ZW50LW1vYmlsZScpLnNsaWRlVXAoNjAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gYXR1YWw7XHJcbiAgICAgICAgICAgIGlmKGlucHV0LmNoZWNrZWQpe1xyXG4gICAgICAgICAgICAgICAgJChpbnB1dCkuY2xvc2VzdCgnLmNvbnRlbnQtbW9iaWxlJykuc2xpZGVEb3duKDYwMCk7XHJcbiAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgJChpbnB1dCkuY2xvc2VzdCgnLmNvbnRlbnQtbW9iaWxlJykuc2xpZGVVcCg2MDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpe1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbG9yID0gJChpbnB1dCkuYXR0cignaWQnKTtcclxuICAgICAgICAgICAgICAgICQoaW5wdXQpLmNsb3Nlc3QoXCIuYmlrZU1vYmlsZVwiKS5maW5kKFwiLmNvbnRlbnQ+ZGl2Om5vdCgjXCIgKyB2YWxvciArIFwiKVwiKS5zbGlkZVVwKDYwMCk7XHJcbiAgICAgICAgICAgICAgICAkKGlucHV0KS5jbG9zZXN0KFwiLmJpa2VNb2JpbGVcIikuZmluZChcIi5jb250ZW50PmRpdiNcIiArIHZhbG9yKS5zbGlkZURvd24oNjAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgICAoZnVuY3Rpb24gYmlrZURlc2t0b3AoKXtcclxuICAgICAgICBsZXQgaW5wdXRzID0gYmlrZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnRhYkRlc2s+aW5wdXRbdHlwZT1jaGVja2JveF1cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKGxldCBpPTA7aTxpbnB1dHMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IGlucHV0c1tpXTtcclxuICAgICAgICAgICAgJChpbnB1dCkudW5iaW5kKCdjaGFuZ2UnKS5jaGFuZ2UoZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGxldCBhdHVhbCA9IGlucHV0LmNoZWNrZWQ/IHRydWU6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqPTA7ajxpbnB1dHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBpbnB1dHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJChlbGVtZW50KS5wYXJlbnQoKS5maW5kKCcuY29udGVudC1kZXNrdG9wJykuYW5pbWF0ZSh7b3BhY2l0eTogMCwgZGlzcGxheTogXCJub25lXCJ9LDcwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gYXR1YWw7XHJcbiAgICAgICAgICAgICAgICBpZihpbnB1dC5jaGVja2VkKXtcclxuICAgICAgICAgICAgICAgICAgICAkKGlucHV0KS5wYXJlbnQoKS5maW5kKCcuY29udGVudC1kZXNrdG9wJykuYW5pbWF0ZSh7b3BhY2l0eTogMX0sNzAwKTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICQoaW5wdXQpLnBhcmVudCgpLmZpbmQoJy5jb250ZW50LWRlc2t0b3AnKS5hbmltYXRlKHtvcGFjaXR5OiAwLCBkaXNwbGF5OiBcIm5vbmVcIn0sNzAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCB2YWxvciA9ICQoaW5wdXQpLmF0dHIoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAkKGlucHV0KS5jbG9zZXN0KFwiLmJpa2VEZXNrdG9wXCIpLmZpbmQoXCIuY29udGVudD5kaXY6bm90KCNcIiArIHZhbG9yICsgXCIpXCIpLmFuaW1hdGUoe29wYWNpdHk6IDAsIGRpc3BsYXk6IFwibm9uZVwifSw3MDApO1xyXG4gICAgICAgICAgICAgICAgJChpbnB1dCkuY2xvc2VzdChcIi5iaWtlRGVza3RvcFwiKS5maW5kKFwiLmNvbnRlbnQ+ZGl2I1wiICsgdmFsb3IpLmFuaW1hdGUoe29wYWNpdHk6IDF9LDcwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG4gICAgaWYod2luZG93LmlubmVyV2lkdGggPCAxMDI0KXtcclxuICAgICAgICBjb25zdCBjb250ZW50TW9iaWxlID0gYmlrZS5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnQtbW9iaWxlLXRuc1wiKTtcclxuICAgICAgICB0bnMoe1xyXG4gICAgICAgICAgICBjb250YWluZXI6IGNvbnRlbnRNb2JpbGUsXHJcbiAgICAgICAgICAgIGNlbnRlcjogZmFsc2UsXHJcbiAgICAgICAgICAgIGxvb3A6IHRydWUsXHJcbiAgICAgICAgICAgIHJld2luZDogdHJ1ZSxcclxuICAgICAgICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgICAgICAgYXV0b1dpZHRoOiB0cnVlLFxyXG4gICAgICAgICAgICBpdGVtczogMSxcclxuICAgICAgICAgICAgc2xpZGVCeTogMSxcclxuICAgICAgICAgICAgLy8gZ3V0dGVyOiAxMDAsXHJcbiAgICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgICAgIG1vdXNlRHJhZzogdHJ1ZSxcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5SG92ZXJQYXVzZTogdHJ1ZSxcclxuICAgICAgICAgICAgYXV0b3BsYXlUaW1lb3V0OiAzNTAwLFxyXG4gICAgICAgICAgICBjb250cm9sczogZmFsc2UsXHJcbiAgICAgICAgICAgIGF1dG9wbGF5QnV0dG9uT3V0cHV0OiBmYWxzZSxcclxuICAgICAgICAgICAgLy8gZWRnZVBhZGRpbmc6ICh3aW5kb3cuaW5uZXJXaWR0aCAtIDI2MikgLzIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gY29uc3QgYmlrZVNsaWRlID0gYmlrZS5xdWVyeVNlbGVjdG9yKFwiI2Jpa2UwLW93XCIpO1xyXG4gICAgICAgIC8vIGJpa2VTbGlkZS5jbGFzc0xpc3QuYWRkKCdjb250ZW50LW1vYmlsZScpXHJcbiAgICB9XHJcblxyXG4gICAgaWYoYmlrZS5jb250YWlucyhiaWtlLnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLW1vZGFsPWZpY2hhLXRlY25pY2FdJykpKXtcclxuICAgICAgICAoZnVuY3Rpb24gb3Blbk1vZGFsKCl7XHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsQnRuID0gYmlrZS5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1idG5Nb2RhbD1maWNoYS10ZWNuaWNhXScpXHJcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gYmlrZS5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2RhbD1maWNoYS10ZWNuaWNhXScpXHJcbiAgICAgICAgICAgIGNvbnN0IGNsb3NlTW9kYWwgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UtbW9kYWwnKVxyXG5cclxuICAgICAgICAgICAgbW9kYWxCdG4uZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJylcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjbG9zZU1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIG1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSgpKVxyXG4gICAgfVxyXG59IiwiY29uc3QgYm94ZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJveC1zcGxpdHNcIik7XHJcbmlmKGJveGVzKXtcclxuICAgIGZvcihsZXQgaT0wO2k8Ym94ZXMubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgIGxldCBib3hUb3AgPSBib3hlc1tpXS5vZmZzZXRUb3A7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZW50ZXJib3hTcGxpdCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGVudGVyYm94U3BsaXQpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGVudGVyYm94U3BsaXQoc2Nyb2xsVG9wPTApe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBpZihzY3JvbGxUb3Ard2luZG93LmlubmVySGVpZ2h0ID4gYm94VG9wKXtcclxuICAgICAgICAgICAgICAgIGJveGVzW2ldLmNsYXNzTGlzdC5hZGQoXCJvblwiKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGVudGVyYm94U3BsaXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIChmdW5jdGlvbiBhYnJpclZpZGVvKCl7XHJcbiAgICAgICAgbGV0IG1vZGFsVmlkZW8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLXZpZGVvLWJveC1zcGxpdFwiKTtcclxuICAgICAgICBpZihtb2RhbFZpZGVvKXtcclxuICAgICAgICAgICAgbGV0IHBsYXllclZpZGVvQm94U3BsaXQ7XHJcbiAgICAgICAgICAgIGxldCB2aWRlb0NhcnJlZ2FkbyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IobGV0IGk9MDtpPGJveGVzLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgIGxldCBvcGVuVmlkZW8gPSBib3hlc1tpXS5xdWVyeVNlbGVjdG9yKFwiYS5vcGVuVmlkZW9cIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsLXZpZGVvLWJveC1zcGxpdFwiKTtcclxuICAgICAgICAgICAgICAgIGxldCB2aWRlb0lkID0gZ2V0WW91VHViZUlEKG1vZGFsVmlkZW8uZGF0YXNldC52aWRlbyk7XHJcbiAgICAgICAgICAgICAgICBpZihvcGVuVmlkZW8pe1xyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5WaWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNhcnJlZ2FyVmlkZW8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNhcnJlZ2FyVmlkZW8oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVmlkZW9Cb3hTcGxpdCA9IG5ldyBZVC5QbGF5ZXIoIG1vZGFsVmlkZW8ucXVlcnlTZWxlY3RvcihcIi52aWRlby1jb250ZW50XCIpICwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnNTIwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNzAwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvSWQ6IHZpZGVvSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWYXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbCc6IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnb25SZWFkeSc6IGFicmlyVmlkZW9Cb3hTcGxpdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFicmlyVmlkZW9Cb3hTcGxpdCgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9DYXJyZWdhZG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVmlkZW9Cb3hTcGxpdC5wbGF5VmlkZW8oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuVmlkZW8ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjYXJyZWdhclZpZGVvKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5WaWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGU9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbFZpZGVvLmNsYXNzTGlzdC5hZGQoXCJvcGVuZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZpZGVvQ2FycmVnYWRvKSBwbGF5ZXJWaWRlb0JveFNwbGl0LnBsYXlWaWRlbygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZT0+e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllclZpZGVvQm94U3BsaXQuc3RvcFZpZGVvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsVmlkZW8uY2xhc3NMaXN0LnJlbW92ZShcIm9wZW5lZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxufSIsIlwidXNlIHN0cmljdFwiOyIsImNvbnN0IGhlYWRlckJsb2NrID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXJcIik7XHJcbmlmKGhlYWRlckJsb2NrICYmIGhlYWRlckJsb2NrLmNsYXNzTGlzdC5jb250YWlucyhcImhlYWRlci1ibG9ja1wiKSl7XHJcbiAgICAvLyAoZnVuY3Rpb24gbWVudU5hdmlnYXRvck1vYmlsZSgpe1xyXG4gICAgLy8gICAgIGNvbnN0IGJvdG9lcyA9IGhlYWRlckJsb2NrLnF1ZXJ5U2VsZWN0b3JBbGwoXCJuYXYgYVwiKTtcclxuICAgIC8vICAgICBmb3IobGV0IGk9MDtpPGJvdG9lcy5sZW5ndGg7aSsrKXtcclxuICAgIC8vICAgICAgICAgJChib3RvZXNbaV0pLnVuYmluZCgnY2xpY2snKS5jbGljayhmdW5jdGlvbihlKSB7XHJcbiAgICAvLyAgICAgICAgICAgICBjb25zdCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ21haW4+c2VjdGlvbiBpbnB1dC5jYXJkJyk7XHJcbiAgICAvLyAgICAgICAgICAgICBpZihib3RvZXNbaV0uaGFzaCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYm90b2VzW2ldLmhhc2gpLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dC5jYXJkXCIpICYmIHdpbmRvdy5pbm5lcldpZHRoIDwgMTAyNCl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbG9zZS1oZWFkZXJcIik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8Y2FyZHMubGVuZ3RoO2orKyl7IGNhcmRzW2pdLmNoZWNrZWQgPSBmYWxzZTsgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGJvdG9lc1tpXS5oYXNoKS5xdWVyeVNlbGVjdG9yKFwiaW5wdXQuY2FyZFwiKS5jaGVja2VkID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJidXJndWVyLW1lbnVcIikuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBjbG9zZS5jbGFzc0xpc3QuYWRkKFwiY2FyZFwiKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgY2xvc2UuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8Y2FyZHMubGVuZ3RoO2orKyl7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZHNbal0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZS5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZFwiKTtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1cmd1ZXItbWVudVwiKS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8Y2FyZHMubGVuZ3RoO2orKyl7IGNhcmRzW2pdLmNoZWNrZWQgPSBmYWxzZTsgfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBsZXQgaGVhZGVyID0gNjA7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGxldCBhbHR1cmEgPSAkKGJvdG9lc1tpXS5oYXNoKS5vZmZzZXQoKS50b3AgLSBoZWFkZXIgPiAwPyAkKGJvdG9lc1tpXS5oYXNoKS5vZmZzZXQoKS50b3AgLSBoZWFkZXI6IDA7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICQoXCJib2R5LCBodG1sXCIpLnN0b3AoKS5kZWxheSgwKS5hbmltYXRlKHtcclxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogYWx0dXJhXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDAsIFwic3dpbmdcIik7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICB9KTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9KSgpO1xyXG5cclxuICAgIChmdW5jdGlvbiBtZW51SW5kaWNhdG9yKCl7XHJcbiAgICAgICAgY29uc3QgbWVudSA9IGhlYWRlckJsb2NrLnF1ZXJ5U2VsZWN0b3IoJy5tZW51Jyk7XHJcbiAgICAgICAgY29uc3QgYm90b2VzID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCdhOm5vdCg6bGFzdC1jaGlsZCknKTtcclxuICAgICAgICBjb25zdCBpbmRpY2F0b3IgPSBtZW51LnF1ZXJ5U2VsZWN0b3IoJ2hyJyk7XHJcbiAgICAgICAgY29uc3QgaW5kaWNhdG9yV2lkdGggPSBNYXRoLnJvdW5kKGluZGljYXRvci5vZmZzZXRXaWR0aC80KTtcclxuICAgICAgICBsZXQgaGFzaHMgPSBbXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY2VudHJhbGl6YUluZGljYXRvcihlbGVtZW50KXtcclxuICAgICAgICAgICAgbGV0IHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgbGV0IGxlZnQgPSBlbGVtZW50Lm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgIGxldCBwb3NpdGlvbiA9IE1hdGgucm91bmQobGVmdCArICh3aWR0aC8yKSAtIDEzKTtcclxuICAgICAgICAgICAgaW5kaWNhdG9yLnN0eWxlLmxlZnQgPSAocG9zaXRpb24gLSBpbmRpY2F0b3JXaWR0aCkrJ3B4JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJlZmVyZW5jaWFBbmNob3IoKXtcclxuICAgICAgICAgICAgbGV0IHNjcm9sbFRvcCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIGxldCBoZWlnaHQgPSBoZWFkZXJCbG9jay5vZmZzZXRIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGk9MDtpPGhhc2hzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICAgICAgbGV0IGF0dWFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihoYXNoc1tpXSk7XHJcbiAgICAgICAgICAgICAgICBpZihhdHVhbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlZiA9IGF0dWFsLm9mZnNldFRvcDtcclxuICAgICAgICAgICAgICAgICAgICBpZihzY3JvbGxUb3ArMjAwID4gcmVmICYmIHdpbmRvdy5pbm5lcldpZHRoID4gMTAyNCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB6b25hQXR1YWwgPSBtZW51LnF1ZXJ5U2VsZWN0b3IoJ2FbaHJlZj1cIicraGFzaHNbaV0rJ1wiXScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZW50cmFsaXphSW5kaWNhdG9yKHpvbmFBdHVhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaj0wO2o8bWVudS5xdWVyeVNlbGVjdG9yQWxsKFwiYVwiKS5sZW5ndGg7aisrKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbnUucXVlcnlTZWxlY3RvckFsbChcImFcIilbal0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uYUF0dWFsLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGxldCBpPTA7aTxib3RvZXMubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGhhc2hzLnB1c2goYm90b2VzW2ldLmhhc2gpO1xyXG4gICAgICAgICAgICBib3RvZXNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgY2VudHJhbGl6YUluZGljYXRvcih0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGJvdG9lc1tpXS5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJlZmVyZW5jaWFBbmNob3IodGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoYXNocyA9IGhhc2hzLmZpbHRlcihmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgcmV0dXJuIGUgIT0gXCJcIjtcclxuICAgICAgICB9KVxyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCByZWZlcmVuY2lhQW5jaG9yKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVmZXJlbmNpYUFuY2hvcilcclxuICAgIH0oKSk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgKGZ1bmN0aW9uIG9wZW5NZW51KCl7XHJcbiAgICAgICAgbGV0IGJ1cmd1ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJ1cmd1ZXItbWVudVwiKTtcclxuICAgICAgICBidXJndWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGlmKGJ1cmd1ZXIuY2hlY2tlZCA9PSB0cnVlKXtcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgKGZ1bmN0aW9uIHRvZ2dsZUNsb3NlQnV0dG9uKCl7XHJcbiAgICAgICAgY29uc3QgY2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdtYWluPnNlY3Rpb24gaW5wdXQuY2FyZCcpO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFsdGVyYXItY2lkYWRlJyk7XHJcbiAgICAgICAgaWYoY2FyZHMubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICAgIGNhcmRzLmZvckVhY2goKGNhcmQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGNhcmQuY2hlY2tlZCA9PSB0cnVlKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuLXhzJylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICBjbG9zZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LmFkZCgnaGlkZGVuLXhzJylcclxuICAgICAgICB9KVxyXG4gICAgfSkoKTtcclxuICAgIFxyXG4gICAgKGZ1bmN0aW9uIHNjcm9sbE1lbnUoKXtcclxuICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJoZWFkZXJcIik7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgYWNoYXRhTWVudSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGFjaGF0YU1lbnUpO1xyXG4gICAgICAgIGZ1bmN0aW9uIGFjaGF0YU1lbnUoc2Nyb2xsVG9wPTApe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBpZihzY3JvbGxUb3AgPiAzMCl7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QucmVtb3ZlKFwib25cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG59IiwiY29uc3QgaW5mb3JtYWNvZXMyY29sdW5hcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYm94LWluZm9ybWFjb2VzXCIpO1xyXG5pZihpbmZvcm1hY29lczJjb2x1bmFzKXtcclxuICAgIChmdW5jdGlvbiBhbmltYWNhb0VudHJhZGFJbmZvcygpe1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGVudGVySW5mb3MpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBlbnRlckluZm9zKTtcclxuICAgICAgICBmdW5jdGlvbiBlbnRlckluZm9zKHNjcm9sbFRvcD0wKXtcclxuICAgICAgICAgICAgc2Nyb2xsVG9wID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgaWYoc2Nyb2xsVG9wK3dpbmRvdy5pbm5lckhlaWdodCA+IGluZm9ybWFjb2VzMmNvbHVuYXMub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIGluZm9ybWFjb2VzMmNvbHVuYXMuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZW50ZXJJbmZvcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIChmdW5jdGlvbiBmZWNoYURlbWFpc0luZm9zKCl7XHJcbiAgICAgICAgbGV0IGlucHV0cyA9IGluZm9ybWFjb2VzMmNvbHVuYXMucXVlcnlTZWxlY3RvckFsbChcIi50YWI+aW5wdXRbdHlwZT1jaGVja2JveF1cIik7XHJcblxyXG4gICAgICAgIGlucHV0c1swXS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICBcclxuICAgICAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0KXtcclxuICAgICAgICAgICAgbGV0IGNvbnRlbnRNb2JpbGUgPSBpbnB1dHNbMF0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgY29udGVudE1vYmlsZS5xdWVyeVNlbGVjdG9yKFwiLmNvbnRlbnRcIikuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGluZm9ybWFjb2VzMmNvbHVuYXMucXVlcnlTZWxlY3RvckFsbChcIi5pbmZvcy1jb250ZW50IC5jb250ZW50XCIpO1xyXG4gICAgICAgICAgICBsZXQgYXR1YWwgPSBjb250ZW50WzBdO1xyXG4gICAgICAgICAgICBhdHVhbC5jbGFzc0xpc3QuYWRkKFwib25cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8aW5wdXRzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBsZXQgaW5wdXQgPSBpbnB1dHNbaV07XHJcbiAgICAgICAgICAgIGxldCBjb250ZW50TW9iaWxlX3ggPSBpbnB1dHNbMF0ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBpbmZvcm1hY29lczJjb2x1bmFzLnF1ZXJ5U2VsZWN0b3IoXCIuaW5mb3MtY29udGVudFwiKTtcclxuICAgICAgICAgICAgbGV0IHZhbG9yID0gaW5wdXQuZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGxldCBhdHVhbCA9IGlucHV0LmNoZWNrZWQ/IHRydWU6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBqPTA7ajxpbnB1dHMubGVuZ3RoO2orKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBpbnB1dHNbal07XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbG9yRSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250ZW50TW9iaWxlID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoIDw9IDEwMjQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50TW9iaWxlLmNoaWxkcmVuWzJdLmNsYXNzTGlzdC5yZW1vdmUoJ29uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuY2hpbGRyZW5bal0uY2xhc3NMaXN0LnJlbW92ZSgnb24nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gYXR1YWw7XHJcbiAgICAgICAgICAgICAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8PSAxMDI0KXtcclxuICAgICAgICAgICAgICAgICAgICBpZihpbnB1dC5jaGVja2VkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQubmV4dEVsZW1lbnRTaWJsaW5nLm5leHRFbGVtZW50U2libGluZy5jbGFzc0xpc3QuYWRkKCdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGlucHV0LmNoZWNrZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29udGVudE9uID0gY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmNvbnRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgYz0wO2M8Y29udGVudE9uLmxlbmd0aDtjKyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY29udGVudE9uW2NdLmNsYXNzTGlzdC5jb250YWlucyh2YWxvcikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRPbltjXS5jbGFzc0xpc3QuYWRkKCdvbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIChmdW5jdGlvbiBhYnJpck1vZGFsUmVndWxhbWVudG8oKXtcclxuICAgICAgICBjb25zdCBtb2RhbFJlZ3VsYW1lbnRvID0gaW5mb3JtYWNvZXMyY29sdW5hcy5xdWVyeVNlbGVjdG9yKFwiZGl2LnJlZ3VsYW1lbnRvTW9kYWxcIik7XHJcbiAgICAgICAgY29uc3QgbGlua1JlZ3VsYW1lbnRvID0gaW5mb3JtYWNvZXMyY29sdW5hcy5xdWVyeVNlbGVjdG9yQWxsKCdhW2hyZWY9XCIjcmVndWxhbWVudG9Nb2RhbFwiXScpO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlUmVndWxhbWVudG8gPSBtb2RhbFJlZ3VsYW1lbnRvLnF1ZXJ5U2VsZWN0b3IoXCIuY2xvc2UtcmVndWxhbWVudG9cIik7XHJcbiAgICAgICAgaWYobGlua1JlZ3VsYW1lbnRvLmxlbmd0aD4wKXsgXHJcbiAgICAgICAgICAgIGZvcihsZXQgaT0wOyBpPGxpbmtSZWd1bGFtZW50by5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGlua0F0dWFsID0gbGlua1JlZ3VsYW1lbnRvW2ldO1xyXG4gICAgICAgICAgICAgICAgbGlua0F0dWFsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsUmVndWxhbWVudG8uY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTsgfSwgODAwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsb3NlUmVndWxhbWVudG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgbW9kYWxSZWd1bGFtZW50by5jbGFzc0xpc3QucmVtb3ZlKFwib25cIik7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7IH0sIDgwMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0oKSk7XHJcbn0iLCJjb25zdCBraXRzQ2Fyb3Vzc2VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJraXRzXCIpO1xyXG5pZihraXRzQ2Fyb3Vzc2VsKXtcclxuICAgIGZ1bmN0aW9uIGVudGVya2l0c0Nhcm91c3NlbChzY3JvbGxUb3A9MCl7XHJcbiAgICAgICAgc2Nyb2xsVG9wID0gZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICBpZihzY3JvbGxUb3ArdGhpcy5pbm5lckhlaWdodCA+IGtpdHNDYXJvdXNzZWwub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAga2l0c0Nhcm91c3NlbC5jbGFzc0xpc3QuYWRkKFwib25cIik7XHJcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGVudGVya2l0c0Nhcm91c3NlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZW50ZXJraXRzQ2Fyb3Vzc2VsKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBlbnRlcmtpdHNDYXJvdXNzZWwpO1xyXG4gICAgXHJcbiAgICAoZnVuY3Rpb24gc2xpZGVyS2l0cygpe1xyXG4gICAgICAgIGxldCBlbCA9IGtpdHNDYXJvdXNzZWwucXVlcnlTZWxlY3RvcignLmtpdHMnKTtcclxuICAgICAgICBpZihlbC5jaGlsZHJlbi5sZW5ndGg+NCB8fCB3aW5kb3cuaW5uZXJXaWR0aDwxMDI0KXtcclxuICAgICAgICAgICAgbGV0IHByZXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3ByZXZLaXRcIik7XHJcbiAgICAgICAgICAgIGxldCBuZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNuZXh0S2l0XCIpO1xyXG4gICAgICAgICAgICB0bnMoe1xyXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiBlbCxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiAxLFxyXG4gICAgICAgICAgICAgICAgbW91c2VEcmFnOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbmF2OiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgc2xpZGVCeTogMSxcclxuICAgICAgICAgICAgICAgIHByZXZCdXR0b246IHByZXYsXHJcbiAgICAgICAgICAgICAgICBuZXh0QnV0dG9uOiBuZXh0LFxyXG4gICAgICAgICAgICAgICAgZ3V0dGVyOiAxMCxcclxuICAgICAgICAgICAgICAgIGZpeGVkV2lkdGg6IDMwMCxcclxuICAgICAgICAgICAgICAgIGVkZ2VQYWRkaW5nOiA0MCxcclxuICAgICAgICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgMTAyNDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVCeTogJ3BhZ2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZFdpZHRoOiAgd2luZG93LmlubmVyV2lkdGggLyAyIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ3V0dGVyOiA1XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAxNjAwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGd1dHRlcjogNTBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoXCJuby1zbGlkZXJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfSgpKTtcclxuICAgIFxyXG4gICAgLy8gKGZ1bmN0aW9uIGVzY29uZGVySW5zY3JldmVyKCl7XHJcbiAgICAvLyAgICAgY29uc3QgYm90YW9pbnNjcmV2YXNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmluc2NyZXZhLXNlLm1vYmlsZScpO1xyXG4gICAgLy8gICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGZ1bmN0aW9uKHNjcm9sbFRvcD0wKXtcclxuICAgIC8vICAgICAgICAgc2Nyb2xsVG9wID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgIC8vICAgICAgICAgaWYoc2Nyb2xsVG9wK3dpbmRvdy5pbm5lckhlaWdodCA+IGtpdHNDYXJvdXNzZWwub2Zmc2V0VG9wICYmIHNjcm9sbFRvcCt3aW5kb3cuaW5uZXJIZWlnaHQgPCBraXRzQ2Fyb3Vzc2VsLm9mZnNldFRvcCArIGtpdHNDYXJvdXNzZWwuY2xpZW50SGVpZ2h0KzIwMCl7XHJcbiAgICAvLyAgICAgICAgICAgICBib3Rhb2luc2NyZXZhc2UuY2xhc3NMaXN0LmFkZCgnb2ZmJyk7XHJcbiAgICAvLyAgICAgICAgIH1lbHNle1xyXG4gICAgLy8gICAgICAgICAgICAgYm90YW9pbnNjcmV2YXNlLmNsYXNzTGlzdC5yZW1vdmUoJ29mZicpO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyB9KCkpO1xyXG4gICAgXHJcbiAgICAoZnVuY3Rpb24gZm9jYUFicmlyTWVkaWRhcygpe1xyXG4gICAgICAgIGNvbnN0IGlucHV0cyA9IGtpdHNDYXJvdXNzZWwucXVlcnlTZWxlY3RvckFsbChcImlucHV0W3R5cGU9Y2hlY2tib3hdXCIpO1xyXG4gICAgICAgIGZvcihsZXQgaT0wO2k8aW5wdXRzLmxlbmd0aDtpKyspe1xyXG4gICAgICAgICAgICBpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA+IDEwMjQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlYWRlclwiKS5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS5zdG9wKCkuZGVsYXkoMCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6IGtpdHNDYXJvdXNzZWwub2Zmc2V0VG9wIC0gaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMDAsIFwic3dpbmdcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWxvciA9IGlucHV0c1tpXS5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZih2YWxvcil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBraXRzQ2Fyb3Vzc2VsLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLm1vZGFsLXRhbWFuaG9zJykuc3R5bGUuekluZGV4ID0gNTA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LmFkZChcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKS5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtpdHNDYXJvdXNzZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcubW9kYWwtdGFtYW5ob3MnKS5zdHlsZS56SW5kZXggPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaHRtbCcpLmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pKCk7XHJcblxyXG4gICAgKGZ1bmN0aW9uIHdlYnNlcnZpY2VLaXRzKCkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGtpdEl0ZW0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdkaXYua2l0Jyk7IC8vIGNyaWFyIGVzdGUgY2FtcG9cclxuICAgICAgICBjb25zdCBpZEV2ZW50byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpZEV2ZW50bycpLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHZhbG9yQ2x1YmVPMiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LnZhbG9yQ2x1YmVPMicpLnZhbHVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGhvcmFBdHVhbCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGNvbnN0IGhvcmFBdHVhbE1haXMgPSBob3JhQXR1YWwgKyAzNjAwMDA7XHJcbiAgICAgICAgY29uc3QgaG9yYUxvY2FsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ0ZW1wb19cIiArIGlkRXZlbnRvKTtcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCB2YWxvckdyYXRpcyA9IFwiMCwwMFwiO1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBraXRJdGVtLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgbGV0IGlkQ2F0ZWdvcmlhID0ga2l0SXRlbVtpXS5xdWVyeVNlbGVjdG9yKCcuaWRDYXRlZ29yaWEnKS52YWx1ZTtcclxuICAgICAgICAgICAgdmFsb3JLaXRzKGlkRXZlbnRvLCBpZENhdGVnb3JpYSwga2l0SXRlbVtpXSlcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gdmFsb3JLaXRzKGlkLCBraXQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGRlID0gZS5xdWVyeVNlbGVjdG9yKCcudmFsb3JEZSBzcGFuJyk7XHJcbiAgICAgICAgICAgIHZhciBwcmVjbyA9IGUucXVlcnlTZWxlY3RvcignLnZhbG9yIHN0cm9uZycpO1xyXG4gICAgICAgICAgICB2YXIgY2VudHMgPSBlLnF1ZXJ5U2VsZWN0b3IoJy5jZW50YXZvcycpO1xyXG4gICAgICAgICAgICBpZiAoIXByZWNvLnRleHRDb250ZW50ICYmICFkZS50ZXh0Q29udGVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhvcmFBdHVhbCA+PSBob3JhTG9jYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYWpheCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGFqYXgub3BlbihcIkdFVFwiLCBcImh0dHBzOi8vd2Vic2VydmljZXMuYXRpdm8uY29tL2JyL2V2ZW50by92YWxvcmVzLWtpdC9cIiArIGlkICsgXCIvXCIgKyBraXQgKyBcIlwiLCB0cnVlKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBhamF4LnNlbmQoKTtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBhamF4Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFqYXgucmVhZHlTdGF0ZSA9PSA0ICYmIGFqYXguc3RhdHVzID09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBhamF4LnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsb3JlcyA9IHJlc3BvbnNlLmRhZG9zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbG9yZXMudmFsb3Ipe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY2xhc3NMaXN0LmFkZCgnZXNnb3RhZG8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2aXJndWxhID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5jbGFzc0xpc3QuY29udGFpbnMoJ2NsdWJlTzInKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlLnBhcmVudE5vZGUuaW5uZXJIVE1MID0gXCJBUEVOQVNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsb3Jlcy52YWxvciA9IChwYXJzZUZsb2F0KHZhbG9yZXMudmFsb3IucmVwbGFjZShcIixcIixcIi5cIikpICsgcGFyc2VGbG9hdCh2YWxvckNsdWJlTzIucmVwbGFjZShcIixcIixcIi5cIikpKS50b0ZpeGVkKDIpLnJlcGxhY2UoXCIuXCIsXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXJndWxhID0gdmFsb3Jlcy52YWxvci5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbG9yZXMudmFsb3IgPT0gdmFsb3Jlcy52YWxvcl9kZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZS5wYXJlbnROb2RlLmlubmVySFRNTCA9IFwiQVBFTkFTXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGUuaW5uZXJIVE1MID0gdmFsb3Jlcy52YWxvcl9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXJndWxhID0gdmFsb3Jlcy52YWxvci5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlLmNsYXNzTGlzdC5jb250YWlucygnZ3JhdGlzJykpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVjby5pbm5lckhUTUwgPSB2aXJndWxhWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZW50cy5pbm5lckhUTUwgPSB2aXJndWxhWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImRlX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkLCB2YWxvcmVzLnZhbG9yX2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInZhbG9yX2F0dWFsX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkLCB2YWxvcmVzLnZhbG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByZWNvX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkLCB2aXJndWxhWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByZWNvX3Zpcmd1bGFfXCIgKyBraXQgKyAnX2lkX2V2ZW50b18nICsgaWQsIHZpcmd1bGFbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidGVtcG9fXCIgKyBpZCwgaG9yYUF0dWFsTWFpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFlLmNsYXNzTGlzdC5jb250YWlucygnZ3JhdGlzJykpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZS5pbm5lckhUTUwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRlX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbG9yTG9jYWwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImRlX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsb3JBdHVhbCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmFsb3JfYXR1YWxfXCIgKyBraXQgKyAnX2lkX2V2ZW50b18nICsgaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbG9yTG9jYWwgPT0gdmFsb3JBdHVhbCAmJiB2YWxvckF0dWFsICE9IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZS5wYXJlbnROb2RlLmlubmVySFRNTCA9IFwiQVBFTkFTXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHZhbG9yTG9jYWwgPT0gdmFsb3JHcmF0aXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNsYXNzTGlzdC5hZGQoJ2dyYXRpcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihlLmNsYXNzTGlzdC5jb250YWlucyhcImNsdWJlTzJcIikpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZS5wYXJlbnROb2RlLmlubmVySFRNTCA9IFwiQVBFTkFTXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKCFlLmNsYXNzTGlzdC5jb250YWlucygnZ3JhdGlzJykpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmVjby5pbm5lckhUTUwgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByZWNvX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VudHMuaW5uZXJIVE1MID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJwcmVjb192aXJndWxhX1wiICsga2l0ICsgJ19pZF9ldmVudG9fJyArIGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHRcdFxyXG4gICAgfSkoKTtcclxufSIsImNvbnN0IG1vZGFsR3J1cG9zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWdydXBvcycpO1xyXG5pZihtb2RhbEdydXBvcyl7XHJcbiAgICAkKG1vZGFsR3J1cG9zKS5jbG9zZXN0KCdzZWN0aW9uJykuYXR0cihcImlkXCIsIFwibW9kYWwtZ3J1cG9zXCIpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zdCBtZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hlYWRlcicpO1xyXG4gICAgICAgIGNvbnN0IGNsb3NlID0gbW9kYWxHcnVwb3MucXVlcnlTZWxlY3RvcignLmNsb3NlLWdydXBvcycpO1xyXG4gICAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBtb2RhbEdydXBvcy5jbGFzc0xpc3QucmVtb3ZlKFwib25cIik7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB9LCAzMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG1lbnUuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0LnRhZ05hbWUgIT09ICdBJykge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRhcmdldCkgeyByZXR1cm47IH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGFyZ2V0LmhyZWYuaW5kZXhPZihcIiNncnVwb3NcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgbW9kYWxHcnVwb3MuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgXHJcbiAgICB9KTtcclxufVxyXG5cclxuIiwiY29uc3QgbW9kYWxJbmZvcm1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RhbC1pbmZvcm1lXCIpO1xyXG5pZihtb2RhbEluZm9ybWUpe1xyXG4gICAgKGZ1bmN0aW9uIGNhcnJlZ2FyTW9kYWwoKXtcclxuICAgICAgICBsZXQgY2xvc2UgPSBtb2RhbEluZm9ybWUucXVlcnlTZWxlY3RvcignLmNsb3NlJyk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgbW9kYWxJbmZvcm1lLmNsYXNzTGlzdC5hZGQoXCJvblwiKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGNsb3NlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbihlKXtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBtb2RhbEluZm9ybWUuY2xhc3NMaXN0LnJlbW92ZShcIm9uXCIpO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5JykuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgIH0sIDYwMCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KCkpO1xyXG59IiwiY29uc3QgbW9kYWxpZGFkZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI21vZGFsaWRhZGVzXCIpO1xyXG5pZihtb2RhbGlkYWRlcyl7XHJcbiAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQpe1xyXG4gICAgICAgIHRucyh7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogbW9kYWxpZGFkZXMucXVlcnlTZWxlY3RvcihcIi5jb250YWluZXJcIiksXHJcbiAgICAgICAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgICAgICAgIGZpeGVkV2lkdGg6IDI1MCxcclxuICAgICAgICAgICAgZ3V0dGVyOiAxMDAsXHJcbiAgICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgICAgIGNvbnRyb2xzVGV4dDogW1wiPHNwYW4+PC9zcGFuPlwiLCBcIjxzcGFuPjwvc3Bhbj5cIl0sXHJcbiAgICAgICAgICAgIC8vIGVkZ2VQYWRkaW5nOiAod2luZG93LmlubmVyV2lkdGggLSAyNjIpIC8yLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiY29uc3QgbmV3c2xldHRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibmV3c2xldHRlclwiKTtcclxuaWYgKG5ld3NsZXR0ZXIpIHtcclxuICAgIChmdW5jdGlvbiBnZW9Mb2NhbGl6YWNhbygpIHtcclxuICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgJ2h0dHA6Ly9nZW9pcC5hdGl2by5jb20vJywgdHJ1ZSk7XHJcblxyXG4gICAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgNDAwKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2lkYWRlID0gZGF0YS5jaWRhZGU7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXN0YWRvID0gZGF0YS5lc3RhZG9fY29kZTtcclxuICAgICAgICAgICAgICAgIGxldCBwYWlzID0gZGF0YS5wYWlzX2NvZGU7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2lkYWRlTmV3c2xldHRlcicpLnZhbHVlID0gY2lkYWRlO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VzdGFkb05ld3NsZXR0ZXInKS52YWx1ZSA9IGVzdGFkbztcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWlzQ2FkYXN0cm8nKS52YWx1ZSA9IHBhaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3Quc2VuZCgpO1xyXG4gICAgfSkoKTtcclxuICAgIChmdW5jdGlvbiBlbnZpYU5ld3NsZXR0ZXIoKSB7XHJcbiAgICAgICAgY29uc3QgZm9ybSA9IG5ld3NsZXR0ZXIucXVlcnlTZWxlY3RvcignZm9ybScpO1xyXG4gICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1c3VhcmlvRW1haWwgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNlbWFpbE5ld3NsZXR0ZXInKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9yaWdlbURlc2NyaWNhbyA9IGZvcm0ucXVlcnlTZWxlY3RvcignI29yaWdlbU5ld3NsZXR0ZXInKS52YWx1ZTtcclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2VtVXJsID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcjb3JpZ2VtVVJMJykudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvcmlnZW1JZCA9IGZvcm0ucXVlcnlTZWxlY3RvcignI3NpdGVPcmlnZW1OZXdzbGV0dGVyJykudmFsdWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1cmxOZXdzbGV0dGVyID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcjdXJsTmV3c2xldHRlcicpLnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdzT3B0aW4gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNvcHRpbk5ld3NsZXR0ZXInKS52YWx1ZTtcclxuXHJcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbignUE9TVCcsIHVybE5ld3NsZXR0ZXIpO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xyXG5cclxuICAgICAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtLnF1ZXJ5U2VsZWN0b3IoJyNub21lTmV3c2xldHRlcicpLnZhbHVlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5xdWVyeVNlbGVjdG9yKCcjZW1haWxOZXdzbGV0dGVyJykudmFsdWUgPSAnJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5jbGFzc0xpc3QuYWRkKFwib2ZmXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJvZmZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgYm9keSA9IHtcclxuICAgICAgICAgICAgICAgICd1c3VhcmlvX25vbWUnOiAnRXNwb3J0ZSBTb2NpYWwnLFxyXG4gICAgICAgICAgICAgICAgJ3VzdWFyaW9fZW1haWwnOiB1c3VhcmlvRW1haWwsXHJcbiAgICAgICAgICAgICAgICAnb3JpZ2VtX2NpZGFkZSc6ICdvcmlnZW1DaWRhZGUnLFxyXG4gICAgICAgICAgICAgICAgJ29yaWdlbV9lc3RhZG8nOiAnb3JpZ2VtRXN0YWRvJyxcclxuICAgICAgICAgICAgICAgICdvcmlnZW1fcGFpcyc6ICdvcmlnZW1QYWlzJyxcclxuICAgICAgICAgICAgICAgICdvcmlnZW1fcGFpc19jYWRhc3Rybyc6ICdvcmlnZW1QYWlzQ2FkYXN0cm8nLFxyXG4gICAgICAgICAgICAgICAgJ29yaWdlbV9kZXNjcmljYW8nOiBvcmlnZW1EZXNjcmljYW8sXHJcbiAgICAgICAgICAgICAgICAnb3JpZ2VtX3VybCc6IG9yaWdlbVVybCxcclxuICAgICAgICAgICAgICAgICdvcmlnZW1faWQnOiBvcmlnZW1JZCxcclxuICAgICAgICAgICAgICAgICduZXdzX29wdGluJzogbmV3c09wdGluXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0LnNlbmQoSlNPTi5zdHJpbmdpZnkoYm9keSkpO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH0oKSk7XHJcbn0iLCIvLyBjb25zdCBwZXJjdXJzbyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwZXJjdXJzbycpO1xyXG4vLyBpZihwZXJjdXJzbyl7XHJcbi8vICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgZnVuY3Rpb24gcmVzZXRJZnJhbWVUb0NlbnRlcigpe1xyXG4vLyAgICAgICAgIGxldCBpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3BlcmN1cnNvIC5wZXJjdXJzb3M+aW5wdXRcIik7XHJcbi8vICAgICAgICAgbGV0IGlmcmFtZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjcGVyY3Vyc28gLnBlcmN1cnNvcyAuaWZyYW1lcyA+KicpO1xyXG4vLyAgICAgICAgIGZvcihsZXQgaT0wO2k8aW5wdXRzLmxlbmd0aDtpKyspe1xyXG4vLyAgICAgICAgICAgICBpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgICAgICAgICAgbGV0IGxpbmsgPSBpbnB1dHNbaV0uZGF0YXNldC5saW5rcGVyY3Vyc287XHJcbi8vICAgICAgICAgICAgICAgICBpZihsaW5rKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBpZnJhbWVzW2ldLnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpLnNyYyA9IGxpbms7XHJcbi8vICAgICAgICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgIH0pO1xyXG4vLyAgICAgICAgIH1cclxuLy8gICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcbi8vICAgICAgICAgICAgIGxldCBsaW5rID0gaW5wdXRzWzBdLmRhdGFzZXQubGlua3BlcmN1cnNvO1xyXG4vLyAgICAgICAgICAgICBpZihsaW5rKXtcclxuLy8gICAgICAgICAgICAgICAgIGlmcmFtZXNbMF0uc3JjID0gbGluaztcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0sIDIwMDApO1xyXG4vLyAgICAgfSk7XHJcbiAgICBcclxuLy8gICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICBsZXQgdmlkZW9zID0gW107XHJcbi8vICAgICAgICAgKGZ1bmN0aW9uIFlvdXR1YmVJZCgpe1xyXG4vLyAgICAgICAgICAgICBsZXQgaWZyYW1lcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNwZXJjdXJzbyAudmlkZW9zIC5pZnJhbWUnKTtcclxuLy8gICAgICAgICAgICAgaWYoaWZyYW1lcy5sZW5ndGggPiAwKXtcclxuLy8gICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPTA7aTxpZnJhbWVzLmxlbmd0aDtpKyspe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmlkZW9JRCA9IGlmcmFtZXNbaV0uZGF0YXNldC5saW5rdmlkZW87XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdFeHAgPSAvXi4qKHlvdXR1XFwuYmVcXC98dlxcL3x1XFwvXFx3XFwvfGVtYmVkXFwvfHdhdGNoXFw/dj18XFwmdj0pKFteI1xcJlxcP10qKS4qLztcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gdmlkZW9JRC5tYXRjaChyZWdFeHApO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb3MucHVzaChuZXcgWVQuUGxheWVyKCd2aWRlby0nK2ksIHtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzUyMCcsXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzEzNjAnLFxyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9JZDogbWF0Y2hbMl0sXHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWYXJzOiB7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3JlbCc6IDBcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4vLyAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIHRyb2NhVmlkZW8oKXtcclxuLy8gICAgICAgICAgICAgICAgICAgICBsZXQgaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIiNwZXJjdXJzbyAudmlkZW9zPmlucHV0XCIpO1xyXG4vLyAgICAgICAgICAgICAgICAgICAgIGZvcihsZXQgaT0wO2k8aW5wdXRzLmxlbmd0aDtpKyspe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbigpe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKGxldCBqPTA7ajx2aWRlb3MubGVuZ3RoOyBqKyspe1xyXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvc1tqXS5wYXVzZVZpZGVvKCk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9zW2pdLmNsZWFyVmlkZW8oKTtcclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vICAgICAgICAgICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgICAgICAgICAgfSkoKTtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pKCk7XHJcbi8vICAgICB9KTtcclxuXHJcbiAgICBcclxuLy8gICAgIChmdW5jdGlvbiB0b2dnbGVWaWRlbygpe1xyXG4vLyAgICAgICAgIGNvbnN0IGJ0blRvZ2dsZVZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FjZXNzYVZpZGVvJyk7XHJcbi8vICAgICAgICAgYnRuVG9nZ2xlVmlkZW8uYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKXtcclxuLy8gICAgICAgICAgICAgbGV0IG1hcGEgPSBidG5Ub2dnbGVWaWRlby5uZXh0RWxlbWVudFNpYmxpbmcucXVlcnlTZWxlY3Rvcignc3Bhbi5tYXBhJyk7XHJcbi8vICAgICAgICAgICAgIGxldCB2aWRlbyA9IGJ0blRvZ2dsZVZpZGVvLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCdzcGFuLnZpZGVvJyk7XHJcbi8vICAgICAgICAgICAgIGlmKG1hcGEuc3R5bGUuZGlzcGxheSA9PSBcIm5vbmVcIil7XHJcbi8vICAgICAgICAgICAgICAgICB2aWRlby5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbi8vICAgICAgICAgICAgICAgICBtYXBhLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuLy8gICAgICAgICAgICAgfWVsc2V7XHJcbi8vICAgICAgICAgICAgICAgICBtYXBhLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuLy8gICAgICAgICAgICAgICAgIHZpZGVvLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuLy8gICAgICAgICAgICAgfVxyXG4vLyAgICAgICAgIH0pO1xyXG4vLyAgICAgfSgpKTtcclxuICAgIFxyXG4vLyAgICAgLy8gKGZ1bmN0aW9uIGNhcm91c3NlbExlZ2VuZGEoKXtcclxuLy8gICAgIC8vICAgICBpZih3aW5kb3cuaW5uZXJXaWR0aDwxMDI0KXtcclxuLy8gICAgIC8vICAgICAgICAgY29uc3QgcGVyY3Vyc28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGVyY3Vyc28nKTtcclxuLy8gICAgIC8vICAgICAgICAgY29uc3QgYm90b2VzID0gcGVyY3Vyc28ucXVlcnlTZWxlY3RvcihcIi5ib3RvZXMtbGVnZW5kYVwiKTtcclxuLy8gICAgIC8vICAgICAgICAgdG5zKHtcclxuLy8gICAgIC8vICAgICAgICAgICAgIGNvbnRhaW5lcjogYm90b2VzLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgbW91c2VEcmFnOiB0cnVlLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgbmF2OiBmYWxzZSxcclxuLy8gICAgIC8vICAgICAgICAgICAgIGxvb3A6IGZhbHNlLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgaXRlbXM6IDMsXHJcbi8vICAgICAvLyAgICAgICAgICAgICBzbGlkZUJ5OiAxLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgZWRnZVBhZGRpbmc6IDIwLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgZml4ZWRXaWR0aDogMTAwLFxyXG4vLyAgICAgLy8gICAgICAgICAgICAgY29udHJvbHM6IGZhbHNlXHJcbi8vICAgICAvLyAgICAgICAgIH0pO1xyXG4vLyAgICAgLy8gICAgIH1cclxuLy8gICAgIC8vIH0oKSk7XHJcbiAgICBcclxuLy8gICAgIC8vIChmdW5jdGlvbiBzb2JlQWx0aW1ldHJpYSgpe1xyXG4vLyAgICAgLy8gICAgIGNvbnN0IHBlcmN1cnNvcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwZXJjdXJzbycpO1xyXG4vLyAgICAgLy8gICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RhbEFsdGltZXRyaWFcIik7XHJcbi8vICAgICAvLyAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZnVuY3Rpb24oKXtcclxuLy8gICAgIC8vICAgICAgICAgaWYod2luZG93LmlubmVyV2lkdGg+MTAyNCl7XHJcbi8vICAgICAvLyAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImhlYWRlclwiKS5vZmZzZXRIZWlnaHQ7XHJcbi8vICAgICAvLyAgICAgICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oe1xyXG4vLyAgICAgLy8gICAgICAgICAgICAgICAgIHRvcDogcGVyY3Vyc29zLm9mZnNldFRvcCAtIGhlYWRlcixcclxuLy8gICAgIC8vICAgICAgICAgICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCcsXHJcbi8vICAgICAvLyAgICAgICAgICAgICAgIH0pXHJcbi8vICAgICAvLyAgICAgICAgIH1lbHNle1xyXG4vLyAgICAgLy8gICAgICAgICAgICAgbGV0IHZhbG9yID0gaW5wdXQuY2hlY2tlZDtcclxuLy8gICAgIC8vICAgICAgICAgICAgIGlmKHZhbG9yKXtcclxuLy8gICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoXCJhbHRpbWV0cmlhT25cIik7XHJcbi8vICAgICAvLyAgICAgICAgICAgICB9ZWxzZXtcclxuLy8gICAgIC8vICAgICAgICAgICAgICAgICBpbnB1dC5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoXCJhbHRpbWV0cmlhT25cIik7XHJcbi8vICAgICAvLyAgICAgICAgICAgICB9XHJcbi8vICAgICAvLyAgICAgICAgIH1cclxuLy8gICAgIC8vICAgICB9KTtcclxuLy8gICAgIC8vIH0pKCk7ICAgIFxyXG4vLyB9IiwiLy9tb2R1bG8gZGUgbG9nb3MtcGF0cm9jaW5pb1xyXG5sZXQgd2lkZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2LmxvZ28tY29udGFpbmVyLnJvZGFwZS1sb2dvcy1pbm5lcicpO1xyXG5cclxuaWYod2lkZ2V0Lmxlbmd0aD4wKXtcclxuXHQoZnVuY3Rpb24gbG9nb3NQYXRyb2NpbmlvQXBvaW8oKXtcclxuXHRcdGxldCBsb2dvO1xyXG5cdFx0XHJcblx0XHRmdW5jdGlvbiBjbG9zZXN0QnlOb2RlKGVsLCBjbGF6eikge1xyXG5cdFx0XHR3aGlsZSAoZWwubm9kZU5hbWUgIT0gY2xhenoudG9VcHBlckNhc2UoKSkge1xyXG5cdFx0XHRcdGVsID0gZWwucGFyZW50Tm9kZTtcclxuXHRcdFx0XHRpZiAoIWVsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGVsO1xyXG5cdFx0fVxyXG5cdFx0aWYod2lkZ2V0KXtcclxuXHRcdFx0bGV0IGVsID0gY2xvc2VzdEJ5Tm9kZSh3aWRnZXRbMF0sJ3NlY3Rpb24nKTtcclxuXHRcdFx0ZWwuaWQgPSAncm9kYXBlLWxvZ29zJztcclxuXHRcdH1cclxuXHR9KSgpO1xyXG59IiwiY29uc3Qgc2thdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NrYXRlXCIpO1xyXG5pZihza2F0ZSl7XHJcbiAgICAoZnVuY3Rpb24gcmVjb3JkTW9iaWxlKCl7XHJcbiAgICAgICAgaWYoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQjb3BlblNrYXRlUmVjb3JkRGVzaycpKXtcclxuICAgICAgICAgICAgY29uc3Qgb3BlblJlY29yZERlc2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCNvcGVuU2thdGVSZWNvcmREZXNrJyk7XHJcbiAgICAgICAgICAgIG9wZW5SZWNvcmREZXNrLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmKG9wZW5SZWNvcmREZXNrLmNoZWNrZWQgPT0gdHJ1ZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH0oKSk7XHJcbn0iLCJjb25zdCBzbGlkZXJJbmZvcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjc2xpZGVyLWluZm9zXCIpO1xyXG5pZihzbGlkZXJJbmZvcyl7XHJcbiAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8IDEwMjQpe1xyXG4gICAgICAgIHRucyh7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lcjogc2xpZGVySW5mb3MucXVlcnlTZWxlY3RvcihcIi5jb250YWluZXJcIiksXHJcbiAgICAgICAgICAgIGNlbnRlcjogdHJ1ZSxcclxuICAgICAgICAgICAgbG9vcDogZmFsc2UsXHJcbiAgICAgICAgICAgIG5hdjogZmFsc2UsXHJcbiAgICAgICAgICAgIGZpeGVkV2lkdGg6IDQxMyxcclxuICAgICAgICAgICAgaXRlbXM6IDEsXHJcbiAgICAgICAgICAgIHNsaWRlQnk6IDEsXHJcbiAgICAgICAgICAgIHNwZWVkOiA2MDAsXHJcbiAgICAgICAgICAgIGNvbnRyb2xzVGV4dDogW1wiPHNwYW4+PC9zcGFuPlwiLCBcIjxzcGFuPjwvc3Bhbj5cIl0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICBzbGlkZXJJbmZvcy5jbGFzc0xpc3QuYWRkKFwib25cIik7XHJcbiAgICB9KTtcclxufSIsInZhciB0YXB1bWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWFpbiN0YXB1bWVcIik7XHJcbmlmKHRhcHVtZSl7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgZnVuY3Rpb24oKXtcclxuICAgICAgICB0YXB1bWUuY2xhc3NMaXN0LmFkZChcIm9uXCIpO1xyXG4gICAgfSlcclxufSIsImNvbnN0IG1vZHVsb1ZpZGVvID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJyk7XHJcbmlmKG1vZHVsb1ZpZGVvKXtcclxuICAgIGNvbnN0IG9wZW5WaWRlbyA9IG1vZHVsb1ZpZGVvLnF1ZXJ5U2VsZWN0b3IoJ2Eub3BlbicpO1xyXG4gICAgY29uc3QgdmlkZW9JZCA9IGdldFlvdVR1YmVJRChtb2R1bG9WaWRlby5kYXRhc2V0LnVybCk7XHJcbiAgICBsZXQgcGxheWVyVmlkZW87XHJcblxyXG4gICAgKGZ1bmN0aW9uIGFuaW1hY2FvRW50cmFkYVZpZGVvKCl7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZW50ZXJWaWRlbyk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGVudGVyVmlkZW8pO1xyXG4gICAgICAgIGZ1bmN0aW9uIGVudGVyVmlkZW8oc2Nyb2xsVG9wPTApe1xyXG4gICAgICAgICAgICBzY3JvbGxUb3AgPSBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICBpZihzY3JvbGxUb3Ard2luZG93LmlubmVySGVpZ2h0ID4gbW9kdWxvVmlkZW8ub2Zmc2V0VG9wKXtcclxuICAgICAgICAgICAgICAgIG1vZHVsb1ZpZGVvLmNsYXNzTGlzdC5hZGQoXCJvblwiKTtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGVudGVyVmlkZW8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKTtcclxuXHJcbiAgICAoZnVuY3Rpb24gbW9kdWxvRGVWaWRlbygpe1xyXG4gICAgICAgIG9wZW5WaWRlby5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGU9PntcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBvcGVuVmlkZW8uY2xhc3NMaXN0LmFkZChcIm9wZW5lZFwiKTtcclxuICAgICAgICAgICAgcGxheWVyVmlkZW8gPSBuZXcgWVQuUGxheWVyKFwiaWZyYW1lTW9kdWxvVmlkZW9cIiwge1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAnNTIwJyxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTM2MCcsXHJcbiAgICAgICAgICAgICAgICB2aWRlb0lkOiB2aWRlb0lkLFxyXG4gICAgICAgICAgICAgICAgcGxheWVyVmFyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICdyZWwnOiAwXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXZlbnRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgJ29uUmVhZHknOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2R1bG9WaWRlby5xdWVyeVNlbGVjdG9yKFwiLmlmcmFtZVwiKS5jbGFzc0xpc3QuYWRkKFwicGxheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyVmlkZW8ucGxheVZpZGVvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH0pKCk7XHJcblxyXG4gICAgKGZ1bmN0aW9uIGFicmVWaWRlb01vYmlsZSgpe1xyXG4gICAgICAgIGNvbnN0IGxhYmVsVmlkZW8gPSBtb2R1bG9WaWRlby5xdWVyeVNlbGVjdG9yKGAjYWJyZUNhcmRWaWRlb2ApO1xyXG4gICAgICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoPDEwMjQpe1xyXG4gICAgICAgICAgICBsYWJlbFZpZGVvLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9zZVZpZGVvUGF1c2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2xvc2UtaGVhZGVyJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwYXVzZVZpZGVvID0gKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBpZighY2xvc2VWaWRlb1BhdXNlLmNoZWNrZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWaWRlby5wYXVzZVZpZGVvKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYobGFiZWxWaWRlby5jaGVja2VkKXtcclxuICAgICAgICAgICAgICAgICAgICBvcGVuVmlkZW8uY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZVZpZGVvUGF1c2UuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcGF1c2VWaWRlbyk7XHJcbiAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZVZpZGVvUGF1c2UucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgcGF1c2VWaWRlbyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0oKSk7XHJcbn1cclxuIiwiLypcclxuKlxyXG4qIEZ1bsOnw7VlcyBkbyBNT0JJTEVcclxuKiBcclxuKi9cclxuKGZ1bmN0aW9uIG5hdmVnYWNhb01vYmlsZSgpe1xyXG5cdGxldCBjYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ21haW4+c2VjdGlvbiBpbnB1dC5jYXJkJyk7XHJcblx0Zm9yKGxldCBpPTA7aTxjYXJkcy5sZW5ndGg7aSsrKXtcclxuXHRcdGxldCBjYXJkQXR1YWwgPSBjYXJkc1tpXTtcclxuXHRcdGNhcmRBdHVhbC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBlbGVtZW50PT57XHJcblx0XHRcdGxldCBhdHVhbCA9IGNhcmRBdHVhbC5jaGVja2VkID8gdHJ1ZSA6IGZhbHNlO1xyXG5cdFx0XHRmb3IobGV0IGo9MDtqPGNhcmRzLmxlbmd0aDtqKyspe1xyXG5cdFx0XHRcdGNhcmRzW2pdLmNoZWNrZWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjYXJkQXR1YWwuY2hlY2tlZCA9IGF0dWFsO1xyXG5cdFx0XHRpZihjYXJkQXR1YWwuY2hlY2tlZCl7XHJcblx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJyk7XHJcblx0XHRcdFx0bGV0IGNsb3NlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjbG9zZS1oZWFkZXJcIik7XHJcblx0XHRcdFx0Y2xvc2UuY2xhc3NMaXN0LmFkZChcImNhcmRcIik7XHJcblx0XHRcdFx0Y2xvc2UuY2hlY2tlZCA9IHRydWU7XHJcblx0XHRcdFx0Y2xvc2UuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0Zm9yKGxldCBqPTA7ajxjYXJkcy5sZW5ndGg7aisrKXtcclxuXHRcdFx0XHRcdFx0Y2FyZHNbal0uY2hlY2tlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJyk7XHJcblx0XHRcdFx0XHRjbG9zZS5jbGFzc0xpc3QucmVtb3ZlKFwiY2FyZFwiKTtcclxuXHRcdFx0XHRcdGlmKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0I29wZW5Ta2F0ZVJlY29yZE1vYmlsZScpKSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCNvcGVuU2thdGVSZWNvcmRNb2JpbGUnKS5jaGVja2VkID0gZmFsc2VcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59KCkpO1xyXG5cclxuLy9GdW7Dp8OjbyBwYXJhIFNWR1xyXG5cclxuY29uc3Qgc3Znc19jbGFzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWdbZGF0YS1zdmddXCIpO1xyXG5cclxuZm9yIChsZXQgc3Znc19pID0gMDsgc3Znc19pIDwgc3Znc19jbGFzcy5sZW5ndGg7IHN2Z3NfaSsrKSB7XHJcbiAgICAgY29uc3Qgc3ZnID0gc3Znc19jbGFzc1tzdmdzX2ldO1xyXG5cclxuIFx0Y29uc3QgaW1nQ2xhc3MgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcclxuIFx0aW1nQ2xhc3MudmFsdWUgPSBzdmcuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XHJcblxyXG4gXHR2YXIgaW1nVVJMID0gc3ZnLmdldEF0dHJpYnV0ZShcImRhdGEtc3ZnXCIpO1xyXG5cclxuIFx0dmFyIGRhdGEgPSBudWxsO1xyXG5cclxuIFx0dmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gXHR4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XHJcblxyXG4gXHR4aHIuYWRkRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gXHRcdGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IDQpIHtcclxuXHJcbiBcdFx0XHRsZXQgc3ZnX25ldyA9IHRoaXMucmVzcG9uc2VUZXh0O1xyXG5cdFx0XHRcclxuIFx0XHQvLyBSZXBsYWNlIGltYWdlIHdpdGggbmV3IFNWR1xyXG4gXHRcdHBhcmVudCA9IHN2Zy5wYXJlbnROb2RlO1xyXG4gXHRcdGxldCB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gc3ZnX25ldztcclxuICAgICAgICBcclxuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0aWYodGVtcERpdi5jaGlsZE5vZGVzW2ldLnRhZ05hbWU9PSdzdmcnKXtcclxuIFx0XHRcdFx0c3ZnX25ldyA9IHRlbXBEaXYuY2hpbGROb2Rlc1tpXTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcblxyXG4gICAgICAgICAvLyBBZGQgcmVwbGFjZWQgaW1hZ2UncyBjbGFzc2VzIHRvIHRoZSBuZXcgU1ZHXHJcbiBcdFx0aWYodHlwZW9mIGltZ0NsYXNzICE9PSAndW5kZWZpbmVkJykge1xyXG4gXHRcdFx0c3ZnX25ldy5zZXRBdHRyaWJ1dGVOb2RlKGltZ0NsYXNzKTtcclxuXHRcdFx0c3ZnX25ldy5jbGFzc0xpc3QuYWRkKFwib25cIik7XHJcblx0XHR9O1xyXG5cclxuIFx0XHQvLyBSZW1vdmUgYW55IGludmFsaWQgWE1MIHRhZ3MgYXMgcGVyIGh0dHA6Ly92YWxpZGF0b3IudzMub3JnXHJcbiBcdFx0cGFyZW50LnJlcGxhY2VDaGlsZChzdmdfbmV3LCBzdmcpO1xyXG5cdFx0XHJcbiBcdH1cclxuIFx0fSk7XHJcblxyXG4gXHR4aHIub3BlbihcIkdFVFwiLCBpbWdVUkwpO1xyXG5cclxuIFx0eGhyLnNlbmQoZGF0YSk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4qXHJcbiogIEFkaWNpb25hIHBhcmFsbGF4IGEgY2xhc3NlIGphcmFsbGF4XHJcbipcclxuKi9cclxuLy8gKGZ1bmN0aW9uIGFkaWNpb25hUGFyYWxsYXgoKXtcclxuLy8gXHRqYXJhbGxheChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuamFyYWxsYXgnKSwge1xyXG4vLyBcdFx0c3BlZWQ6IDAuMVxyXG4vLyBcdH0pO1xyXG4vLyB9KSgpOyJdfQ==
